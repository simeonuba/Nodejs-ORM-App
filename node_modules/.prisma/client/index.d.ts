
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model accounts
 */

export type accounts = {
  id: number
  createAt: Date
  naira_bal: number
  usd_bal: number
  user_id: number
  account_number: string | null
  bank: string | null
  acctRef: string | null
  visibile: number
  updateAt: Date
}

/**
 * Model transfers
 */

export type transfers = {
  id: number
  user_id: number
  amount: number
  to_account: string
  to_bank: string
  to_name: string
  bal_after: number
  createAt: Date
  updateAt: Date
}

/**
 * Model acces_tokens
 */

export type acces_tokens = {
  id: number
  user_id: number
  token: string
  status: string
  createAt: Date
  updateAt: Date
  visible: number
}

/**
 * Model bills
 */

export type bills = {
  id: number
  user_id: number
  bill_id: number
  bill_type: string
  amount: number
  description: string
  createAt: Date
  updateAt: Date
  status: string
  access_details: string
  visible: number
}

/**
 * Model users
 */

export type users = {
  id: number
  email: string
  name: string | null
  password: string
  ccode: string
  fingerprint: string | null
  phone_number: string
  pin: number
  createAt: Date
  updateAt: Date
  visibility: number
  wallet_balance: number
}

/**
 * Model transactions
 */

export type transactions = {
  id: number
  trans_id: string
  user_id: number
  type: string
  amount: number
  status: string
  updateAt: Date
  createAt: Date
  visible: number
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Accounts
 * const accounts = await prisma.accounts.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Accounts
   * const accounts = await prisma.accounts.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<any>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

  /**
   * Executes a raw query and returns the number of affected rows
   * @example
   * ```
   * // With parameters use prisma.$executeRaw``, values will be escaped automatically
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE id = ${1};`
   * // Or
   * const result = await prisma.$executeRaw('UPDATE User SET cool = $1 WHERE id = $2 ;', true, 1)
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $executeRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a raw query and returns the SELECT data
   * @example
   * ```
   * // With parameters use prisma.$queryRaw``, values will be escaped automatically
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'ema.il'};`
   * // Or
   * const result = await prisma.$queryRaw('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'ema.il')
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $queryRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>

      /**
   * `prisma.accounts`: Exposes CRUD operations for the **accounts** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Accounts
    * const accounts = await prisma.accounts.findMany()
    * ```
    */
  get accounts(): Prisma.accountsDelegate<GlobalReject>;

  /**
   * `prisma.transfers`: Exposes CRUD operations for the **transfers** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Transfers
    * const transfers = await prisma.transfers.findMany()
    * ```
    */
  get transfers(): Prisma.transfersDelegate<GlobalReject>;

  /**
   * `prisma.acces_tokens`: Exposes CRUD operations for the **acces_tokens** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Acces_tokens
    * const acces_tokens = await prisma.acces_tokens.findMany()
    * ```
    */
  get acces_tokens(): Prisma.acces_tokensDelegate<GlobalReject>;

  /**
   * `prisma.bills`: Exposes CRUD operations for the **bills** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Bills
    * const bills = await prisma.bills.findMany()
    * ```
    */
  get bills(): Prisma.billsDelegate<GlobalReject>;

  /**
   * `prisma.users`: Exposes CRUD operations for the **users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.usersDelegate<GlobalReject>;

  /**
   * `prisma.transactions`: Exposes CRUD operations for the **transactions** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Transactions
    * const transactions = await prisma.transactions.findMany()
    * ```
    */
  get transactions(): Prisma.transactionsDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 2.30.3
   * Query Engine version: b8c35d44de987a9691890b3ddf3e2e7effb9bf20
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | null | JsonObject | JsonArray

  /**
   * Same as JsonObject, but allows undefined
   */
  export type InputJsonObject = {[Key in string]?: JsonValue}
 
  export interface InputJsonArray extends Array<JsonValue> {}
 
  export type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray
   type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    accounts: 'accounts',
    transfers: 'transfers',
    acces_tokens: 'acces_tokens',
    bills: 'bills',
    users: 'users',
    transactions: 'transactions'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends boolean
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model accounts
   */


  export type AggregateAccounts = {
    _count: AccountsCountAggregateOutputType | null
    count: AccountsCountAggregateOutputType | null
    _avg: AccountsAvgAggregateOutputType | null
    avg: AccountsAvgAggregateOutputType | null
    _sum: AccountsSumAggregateOutputType | null
    sum: AccountsSumAggregateOutputType | null
    _min: AccountsMinAggregateOutputType | null
    min: AccountsMinAggregateOutputType | null
    _max: AccountsMaxAggregateOutputType | null
    max: AccountsMaxAggregateOutputType | null
  }

  export type AccountsAvgAggregateOutputType = {
    id: number | null
    naira_bal: number | null
    usd_bal: number | null
    user_id: number | null
    visibile: number | null
  }

  export type AccountsSumAggregateOutputType = {
    id: number | null
    naira_bal: number | null
    usd_bal: number | null
    user_id: number | null
    visibile: number | null
  }

  export type AccountsMinAggregateOutputType = {
    id: number | null
    createAt: Date | null
    naira_bal: number | null
    usd_bal: number | null
    user_id: number | null
    account_number: string | null
    bank: string | null
    acctRef: string | null
    visibile: number | null
    updateAt: Date | null
  }

  export type AccountsMaxAggregateOutputType = {
    id: number | null
    createAt: Date | null
    naira_bal: number | null
    usd_bal: number | null
    user_id: number | null
    account_number: string | null
    bank: string | null
    acctRef: string | null
    visibile: number | null
    updateAt: Date | null
  }

  export type AccountsCountAggregateOutputType = {
    id: number
    createAt: number
    naira_bal: number
    usd_bal: number
    user_id: number
    account_number: number
    bank: number
    acctRef: number
    visibile: number
    updateAt: number
    _all: number
  }


  export type AccountsAvgAggregateInputType = {
    id?: true
    naira_bal?: true
    usd_bal?: true
    user_id?: true
    visibile?: true
  }

  export type AccountsSumAggregateInputType = {
    id?: true
    naira_bal?: true
    usd_bal?: true
    user_id?: true
    visibile?: true
  }

  export type AccountsMinAggregateInputType = {
    id?: true
    createAt?: true
    naira_bal?: true
    usd_bal?: true
    user_id?: true
    account_number?: true
    bank?: true
    acctRef?: true
    visibile?: true
    updateAt?: true
  }

  export type AccountsMaxAggregateInputType = {
    id?: true
    createAt?: true
    naira_bal?: true
    usd_bal?: true
    user_id?: true
    account_number?: true
    bank?: true
    acctRef?: true
    visibile?: true
    updateAt?: true
  }

  export type AccountsCountAggregateInputType = {
    id?: true
    createAt?: true
    naira_bal?: true
    usd_bal?: true
    user_id?: true
    account_number?: true
    bank?: true
    acctRef?: true
    visibile?: true
    updateAt?: true
    _all?: true
  }

  export type AccountsAggregateArgs = {
    /**
     * Filter which accounts to aggregate.
     * 
    **/
    where?: accountsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of accounts to fetch.
     * 
    **/
    orderBy?: Enumerable<accountsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: accountsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` accounts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` accounts.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned accounts
    **/
    _count?: true | AccountsCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | AccountsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AccountsAvgAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_avg`
    **/
    avg?: AccountsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AccountsSumAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_sum`
    **/
    sum?: AccountsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountsMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: AccountsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountsMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: AccountsMaxAggregateInputType
  }

  export type GetAccountsAggregateType<T extends AccountsAggregateArgs> = {
        [P in keyof T & keyof AggregateAccounts]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccounts[P]>
      : GetScalarType<T[P], AggregateAccounts[P]>
  }


    
    
  export type AccountsGroupByArgs = {
    where?: accountsWhereInput
    orderBy?: Enumerable<accountsOrderByInput>
    by: Array<AccountsScalarFieldEnum>
    having?: accountsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountsCountAggregateInputType | true
    _avg?: AccountsAvgAggregateInputType
    _sum?: AccountsSumAggregateInputType
    _min?: AccountsMinAggregateInputType
    _max?: AccountsMaxAggregateInputType
  }


  export type AccountsGroupByOutputType = {
    id: number
    createAt: Date
    naira_bal: number
    usd_bal: number
    user_id: number
    account_number: string | null
    bank: string | null
    acctRef: string | null
    visibile: number
    updateAt: Date
    _count: AccountsCountAggregateOutputType | null
    _avg: AccountsAvgAggregateOutputType | null
    _sum: AccountsSumAggregateOutputType | null
    _min: AccountsMinAggregateOutputType | null
    _max: AccountsMaxAggregateOutputType | null
  }

  type GetAccountsGroupByPayload<T extends AccountsGroupByArgs> = Promise<
    Array<
      PickArray<AccountsGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof AccountsGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], AccountsGroupByOutputType[P]> 
            : GetScalarType<T[P], AccountsGroupByOutputType[P]>
        }
      > 
    >


  export type accountsSelect = {
    id?: boolean
    createAt?: boolean
    naira_bal?: boolean
    usd_bal?: boolean
    user_id?: boolean
    account_number?: boolean
    bank?: boolean
    acctRef?: boolean
    visibile?: boolean
    updateAt?: boolean
  }

  export type accountsGetPayload<
    S extends boolean | null | undefined | accountsArgs,
    U = keyof S
      > = S extends true
        ? accounts
    : S extends undefined
    ? never
    : S extends accountsArgs | accountsFindManyArgs
    ?'include' extends U
    ? accounts 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof accounts ?accounts [P]
  : 
     never
  } 
    : accounts
  : accounts


  type accountsCountArgs = Merge<
    Omit<accountsFindManyArgs, 'select' | 'include'> & {
      select?: AccountsCountAggregateInputType | true
    }
  >

  export interface accountsDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Accounts that matches the filter.
     * @param {accountsFindUniqueArgs} args - Arguments to find a Accounts
     * @example
     * // Get one Accounts
     * const accounts = await prisma.accounts.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends accountsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, accountsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'accounts'> extends True ? CheckSelect<T, Prisma__accountsClient<accounts>, Prisma__accountsClient<accountsGetPayload<T>>> : CheckSelect<T, Prisma__accountsClient<accounts | null >, Prisma__accountsClient<accountsGetPayload<T> | null >>

    /**
     * Find the first Accounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {accountsFindFirstArgs} args - Arguments to find a Accounts
     * @example
     * // Get one Accounts
     * const accounts = await prisma.accounts.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends accountsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, accountsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'accounts'> extends True ? CheckSelect<T, Prisma__accountsClient<accounts>, Prisma__accountsClient<accountsGetPayload<T>>> : CheckSelect<T, Prisma__accountsClient<accounts | null >, Prisma__accountsClient<accountsGetPayload<T> | null >>

    /**
     * Find zero or more Accounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {accountsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Accounts
     * const accounts = await prisma.accounts.findMany()
     * 
     * // Get first 10 Accounts
     * const accounts = await prisma.accounts.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const accountsWithIdOnly = await prisma.accounts.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends accountsFindManyArgs>(
      args?: SelectSubset<T, accountsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<accounts>>, PrismaPromise<Array<accountsGetPayload<T>>>>

    /**
     * Create a Accounts.
     * @param {accountsCreateArgs} args - Arguments to create a Accounts.
     * @example
     * // Create one Accounts
     * const Accounts = await prisma.accounts.create({
     *   data: {
     *     // ... data to create a Accounts
     *   }
     * })
     * 
    **/
    create<T extends accountsCreateArgs>(
      args: SelectSubset<T, accountsCreateArgs>
    ): CheckSelect<T, Prisma__accountsClient<accounts>, Prisma__accountsClient<accountsGetPayload<T>>>

    /**
     * Create many Accounts.
     *     @param {accountsCreateManyArgs} args - Arguments to create many Accounts.
     *     @example
     *     // Create many Accounts
     *     const accounts = await prisma.accounts.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends accountsCreateManyArgs>(
      args?: SelectSubset<T, accountsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Accounts.
     * @param {accountsDeleteArgs} args - Arguments to delete one Accounts.
     * @example
     * // Delete one Accounts
     * const Accounts = await prisma.accounts.delete({
     *   where: {
     *     // ... filter to delete one Accounts
     *   }
     * })
     * 
    **/
    delete<T extends accountsDeleteArgs>(
      args: SelectSubset<T, accountsDeleteArgs>
    ): CheckSelect<T, Prisma__accountsClient<accounts>, Prisma__accountsClient<accountsGetPayload<T>>>

    /**
     * Update one Accounts.
     * @param {accountsUpdateArgs} args - Arguments to update one Accounts.
     * @example
     * // Update one Accounts
     * const accounts = await prisma.accounts.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends accountsUpdateArgs>(
      args: SelectSubset<T, accountsUpdateArgs>
    ): CheckSelect<T, Prisma__accountsClient<accounts>, Prisma__accountsClient<accountsGetPayload<T>>>

    /**
     * Delete zero or more Accounts.
     * @param {accountsDeleteManyArgs} args - Arguments to filter Accounts to delete.
     * @example
     * // Delete a few Accounts
     * const { count } = await prisma.accounts.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends accountsDeleteManyArgs>(
      args?: SelectSubset<T, accountsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {accountsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Accounts
     * const accounts = await prisma.accounts.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends accountsUpdateManyArgs>(
      args: SelectSubset<T, accountsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Accounts.
     * @param {accountsUpsertArgs} args - Arguments to update or create a Accounts.
     * @example
     * // Update or create a Accounts
     * const accounts = await prisma.accounts.upsert({
     *   create: {
     *     // ... data to create a Accounts
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Accounts we want to update
     *   }
     * })
    **/
    upsert<T extends accountsUpsertArgs>(
      args: SelectSubset<T, accountsUpsertArgs>
    ): CheckSelect<T, Prisma__accountsClient<accounts>, Prisma__accountsClient<accountsGetPayload<T>>>

    /**
     * Count the number of Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {accountsCountArgs} args - Arguments to filter Accounts to count.
     * @example
     * // Count the number of Accounts
     * const count = await prisma.accounts.count({
     *   where: {
     *     // ... the filter for the Accounts we want to count
     *   }
     * })
    **/
    count<T extends accountsCountArgs>(
      args?: Subset<T, accountsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountsAggregateArgs>(args: Subset<T, AccountsAggregateArgs>): PrismaPromise<GetAccountsAggregateType<T>>

    /**
     * Group by Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccountsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountsGroupByArgs['orderBy'] }
        : { orderBy?: AccountsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccountsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountsGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for accounts.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__accountsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * accounts findUnique
   */
  export type accountsFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the accounts
     * 
    **/
    select?: accountsSelect | null
    /**
     * Throw an Error if a accounts can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which accounts to fetch.
     * 
    **/
    where: accountsWhereUniqueInput
  }


  /**
   * accounts findFirst
   */
  export type accountsFindFirstArgs = {
    /**
     * Select specific fields to fetch from the accounts
     * 
    **/
    select?: accountsSelect | null
    /**
     * Throw an Error if a accounts can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which accounts to fetch.
     * 
    **/
    where?: accountsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of accounts to fetch.
     * 
    **/
    orderBy?: Enumerable<accountsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for accounts.
     * 
    **/
    cursor?: accountsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` accounts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` accounts.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of accounts.
     * 
    **/
    distinct?: Enumerable<AccountsScalarFieldEnum>
  }


  /**
   * accounts findMany
   */
  export type accountsFindManyArgs = {
    /**
     * Select specific fields to fetch from the accounts
     * 
    **/
    select?: accountsSelect | null
    /**
     * Filter, which accounts to fetch.
     * 
    **/
    where?: accountsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of accounts to fetch.
     * 
    **/
    orderBy?: Enumerable<accountsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing accounts.
     * 
    **/
    cursor?: accountsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` accounts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` accounts.
     * 
    **/
    skip?: number
    distinct?: Enumerable<AccountsScalarFieldEnum>
  }


  /**
   * accounts create
   */
  export type accountsCreateArgs = {
    /**
     * Select specific fields to fetch from the accounts
     * 
    **/
    select?: accountsSelect | null
    /**
     * The data needed to create a accounts.
     * 
    **/
    data: XOR<accountsCreateInput, accountsUncheckedCreateInput>
  }


  /**
   * accounts createMany
   */
  export type accountsCreateManyArgs = {
    data: Enumerable<accountsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * accounts update
   */
  export type accountsUpdateArgs = {
    /**
     * Select specific fields to fetch from the accounts
     * 
    **/
    select?: accountsSelect | null
    /**
     * The data needed to update a accounts.
     * 
    **/
    data: XOR<accountsUpdateInput, accountsUncheckedUpdateInput>
    /**
     * Choose, which accounts to update.
     * 
    **/
    where: accountsWhereUniqueInput
  }


  /**
   * accounts updateMany
   */
  export type accountsUpdateManyArgs = {
    data: XOR<accountsUpdateManyMutationInput, accountsUncheckedUpdateManyInput>
    where?: accountsWhereInput
  }


  /**
   * accounts upsert
   */
  export type accountsUpsertArgs = {
    /**
     * Select specific fields to fetch from the accounts
     * 
    **/
    select?: accountsSelect | null
    /**
     * The filter to search for the accounts to update in case it exists.
     * 
    **/
    where: accountsWhereUniqueInput
    /**
     * In case the accounts found by the `where` argument doesn't exist, create a new accounts with this data.
     * 
    **/
    create: XOR<accountsCreateInput, accountsUncheckedCreateInput>
    /**
     * In case the accounts was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<accountsUpdateInput, accountsUncheckedUpdateInput>
  }


  /**
   * accounts delete
   */
  export type accountsDeleteArgs = {
    /**
     * Select specific fields to fetch from the accounts
     * 
    **/
    select?: accountsSelect | null
    /**
     * Filter which accounts to delete.
     * 
    **/
    where: accountsWhereUniqueInput
  }


  /**
   * accounts deleteMany
   */
  export type accountsDeleteManyArgs = {
    where?: accountsWhereInput
  }


  /**
   * accounts without action
   */
  export type accountsArgs = {
    /**
     * Select specific fields to fetch from the accounts
     * 
    **/
    select?: accountsSelect | null
  }



  /**
   * Model transfers
   */


  export type AggregateTransfers = {
    _count: TransfersCountAggregateOutputType | null
    count: TransfersCountAggregateOutputType | null
    _avg: TransfersAvgAggregateOutputType | null
    avg: TransfersAvgAggregateOutputType | null
    _sum: TransfersSumAggregateOutputType | null
    sum: TransfersSumAggregateOutputType | null
    _min: TransfersMinAggregateOutputType | null
    min: TransfersMinAggregateOutputType | null
    _max: TransfersMaxAggregateOutputType | null
    max: TransfersMaxAggregateOutputType | null
  }

  export type TransfersAvgAggregateOutputType = {
    id: number | null
    user_id: number | null
    amount: number | null
    bal_after: number | null
  }

  export type TransfersSumAggregateOutputType = {
    id: number | null
    user_id: number | null
    amount: number | null
    bal_after: number | null
  }

  export type TransfersMinAggregateOutputType = {
    id: number | null
    user_id: number | null
    amount: number | null
    to_account: string | null
    to_bank: string | null
    to_name: string | null
    bal_after: number | null
    createAt: Date | null
    updateAt: Date | null
  }

  export type TransfersMaxAggregateOutputType = {
    id: number | null
    user_id: number | null
    amount: number | null
    to_account: string | null
    to_bank: string | null
    to_name: string | null
    bal_after: number | null
    createAt: Date | null
    updateAt: Date | null
  }

  export type TransfersCountAggregateOutputType = {
    id: number
    user_id: number
    amount: number
    to_account: number
    to_bank: number
    to_name: number
    bal_after: number
    createAt: number
    updateAt: number
    _all: number
  }


  export type TransfersAvgAggregateInputType = {
    id?: true
    user_id?: true
    amount?: true
    bal_after?: true
  }

  export type TransfersSumAggregateInputType = {
    id?: true
    user_id?: true
    amount?: true
    bal_after?: true
  }

  export type TransfersMinAggregateInputType = {
    id?: true
    user_id?: true
    amount?: true
    to_account?: true
    to_bank?: true
    to_name?: true
    bal_after?: true
    createAt?: true
    updateAt?: true
  }

  export type TransfersMaxAggregateInputType = {
    id?: true
    user_id?: true
    amount?: true
    to_account?: true
    to_bank?: true
    to_name?: true
    bal_after?: true
    createAt?: true
    updateAt?: true
  }

  export type TransfersCountAggregateInputType = {
    id?: true
    user_id?: true
    amount?: true
    to_account?: true
    to_bank?: true
    to_name?: true
    bal_after?: true
    createAt?: true
    updateAt?: true
    _all?: true
  }

  export type TransfersAggregateArgs = {
    /**
     * Filter which transfers to aggregate.
     * 
    **/
    where?: transfersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of transfers to fetch.
     * 
    **/
    orderBy?: Enumerable<transfersOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: transfersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` transfers from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` transfers.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned transfers
    **/
    _count?: true | TransfersCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | TransfersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TransfersAvgAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_avg`
    **/
    avg?: TransfersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TransfersSumAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_sum`
    **/
    sum?: TransfersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TransfersMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: TransfersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TransfersMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: TransfersMaxAggregateInputType
  }

  export type GetTransfersAggregateType<T extends TransfersAggregateArgs> = {
        [P in keyof T & keyof AggregateTransfers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTransfers[P]>
      : GetScalarType<T[P], AggregateTransfers[P]>
  }


    
    
  export type TransfersGroupByArgs = {
    where?: transfersWhereInput
    orderBy?: Enumerable<transfersOrderByInput>
    by: Array<TransfersScalarFieldEnum>
    having?: transfersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TransfersCountAggregateInputType | true
    _avg?: TransfersAvgAggregateInputType
    _sum?: TransfersSumAggregateInputType
    _min?: TransfersMinAggregateInputType
    _max?: TransfersMaxAggregateInputType
  }


  export type TransfersGroupByOutputType = {
    id: number
    user_id: number
    amount: number
    to_account: string
    to_bank: string
    to_name: string
    bal_after: number
    createAt: Date
    updateAt: Date
    _count: TransfersCountAggregateOutputType | null
    _avg: TransfersAvgAggregateOutputType | null
    _sum: TransfersSumAggregateOutputType | null
    _min: TransfersMinAggregateOutputType | null
    _max: TransfersMaxAggregateOutputType | null
  }

  type GetTransfersGroupByPayload<T extends TransfersGroupByArgs> = Promise<
    Array<
      PickArray<TransfersGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof TransfersGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], TransfersGroupByOutputType[P]> 
            : GetScalarType<T[P], TransfersGroupByOutputType[P]>
        }
      > 
    >


  export type transfersSelect = {
    id?: boolean
    user_id?: boolean
    amount?: boolean
    to_account?: boolean
    to_bank?: boolean
    to_name?: boolean
    bal_after?: boolean
    createAt?: boolean
    updateAt?: boolean
  }

  export type transfersGetPayload<
    S extends boolean | null | undefined | transfersArgs,
    U = keyof S
      > = S extends true
        ? transfers
    : S extends undefined
    ? never
    : S extends transfersArgs | transfersFindManyArgs
    ?'include' extends U
    ? transfers 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof transfers ?transfers [P]
  : 
     never
  } 
    : transfers
  : transfers


  type transfersCountArgs = Merge<
    Omit<transfersFindManyArgs, 'select' | 'include'> & {
      select?: TransfersCountAggregateInputType | true
    }
  >

  export interface transfersDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Transfers that matches the filter.
     * @param {transfersFindUniqueArgs} args - Arguments to find a Transfers
     * @example
     * // Get one Transfers
     * const transfers = await prisma.transfers.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends transfersFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, transfersFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'transfers'> extends True ? CheckSelect<T, Prisma__transfersClient<transfers>, Prisma__transfersClient<transfersGetPayload<T>>> : CheckSelect<T, Prisma__transfersClient<transfers | null >, Prisma__transfersClient<transfersGetPayload<T> | null >>

    /**
     * Find the first Transfers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {transfersFindFirstArgs} args - Arguments to find a Transfers
     * @example
     * // Get one Transfers
     * const transfers = await prisma.transfers.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends transfersFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, transfersFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'transfers'> extends True ? CheckSelect<T, Prisma__transfersClient<transfers>, Prisma__transfersClient<transfersGetPayload<T>>> : CheckSelect<T, Prisma__transfersClient<transfers | null >, Prisma__transfersClient<transfersGetPayload<T> | null >>

    /**
     * Find zero or more Transfers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {transfersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Transfers
     * const transfers = await prisma.transfers.findMany()
     * 
     * // Get first 10 Transfers
     * const transfers = await prisma.transfers.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const transfersWithIdOnly = await prisma.transfers.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends transfersFindManyArgs>(
      args?: SelectSubset<T, transfersFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<transfers>>, PrismaPromise<Array<transfersGetPayload<T>>>>

    /**
     * Create a Transfers.
     * @param {transfersCreateArgs} args - Arguments to create a Transfers.
     * @example
     * // Create one Transfers
     * const Transfers = await prisma.transfers.create({
     *   data: {
     *     // ... data to create a Transfers
     *   }
     * })
     * 
    **/
    create<T extends transfersCreateArgs>(
      args: SelectSubset<T, transfersCreateArgs>
    ): CheckSelect<T, Prisma__transfersClient<transfers>, Prisma__transfersClient<transfersGetPayload<T>>>

    /**
     * Create many Transfers.
     *     @param {transfersCreateManyArgs} args - Arguments to create many Transfers.
     *     @example
     *     // Create many Transfers
     *     const transfers = await prisma.transfers.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends transfersCreateManyArgs>(
      args?: SelectSubset<T, transfersCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Transfers.
     * @param {transfersDeleteArgs} args - Arguments to delete one Transfers.
     * @example
     * // Delete one Transfers
     * const Transfers = await prisma.transfers.delete({
     *   where: {
     *     // ... filter to delete one Transfers
     *   }
     * })
     * 
    **/
    delete<T extends transfersDeleteArgs>(
      args: SelectSubset<T, transfersDeleteArgs>
    ): CheckSelect<T, Prisma__transfersClient<transfers>, Prisma__transfersClient<transfersGetPayload<T>>>

    /**
     * Update one Transfers.
     * @param {transfersUpdateArgs} args - Arguments to update one Transfers.
     * @example
     * // Update one Transfers
     * const transfers = await prisma.transfers.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends transfersUpdateArgs>(
      args: SelectSubset<T, transfersUpdateArgs>
    ): CheckSelect<T, Prisma__transfersClient<transfers>, Prisma__transfersClient<transfersGetPayload<T>>>

    /**
     * Delete zero or more Transfers.
     * @param {transfersDeleteManyArgs} args - Arguments to filter Transfers to delete.
     * @example
     * // Delete a few Transfers
     * const { count } = await prisma.transfers.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends transfersDeleteManyArgs>(
      args?: SelectSubset<T, transfersDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Transfers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {transfersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Transfers
     * const transfers = await prisma.transfers.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends transfersUpdateManyArgs>(
      args: SelectSubset<T, transfersUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Transfers.
     * @param {transfersUpsertArgs} args - Arguments to update or create a Transfers.
     * @example
     * // Update or create a Transfers
     * const transfers = await prisma.transfers.upsert({
     *   create: {
     *     // ... data to create a Transfers
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Transfers we want to update
     *   }
     * })
    **/
    upsert<T extends transfersUpsertArgs>(
      args: SelectSubset<T, transfersUpsertArgs>
    ): CheckSelect<T, Prisma__transfersClient<transfers>, Prisma__transfersClient<transfersGetPayload<T>>>

    /**
     * Count the number of Transfers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {transfersCountArgs} args - Arguments to filter Transfers to count.
     * @example
     * // Count the number of Transfers
     * const count = await prisma.transfers.count({
     *   where: {
     *     // ... the filter for the Transfers we want to count
     *   }
     * })
    **/
    count<T extends transfersCountArgs>(
      args?: Subset<T, transfersCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TransfersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Transfers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransfersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TransfersAggregateArgs>(args: Subset<T, TransfersAggregateArgs>): PrismaPromise<GetTransfersAggregateType<T>>

    /**
     * Group by Transfers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransfersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TransfersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TransfersGroupByArgs['orderBy'] }
        : { orderBy?: TransfersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TransfersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTransfersGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for transfers.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__transfersClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * transfers findUnique
   */
  export type transfersFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the transfers
     * 
    **/
    select?: transfersSelect | null
    /**
     * Throw an Error if a transfers can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which transfers to fetch.
     * 
    **/
    where: transfersWhereUniqueInput
  }


  /**
   * transfers findFirst
   */
  export type transfersFindFirstArgs = {
    /**
     * Select specific fields to fetch from the transfers
     * 
    **/
    select?: transfersSelect | null
    /**
     * Throw an Error if a transfers can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which transfers to fetch.
     * 
    **/
    where?: transfersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of transfers to fetch.
     * 
    **/
    orderBy?: Enumerable<transfersOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for transfers.
     * 
    **/
    cursor?: transfersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` transfers from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` transfers.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of transfers.
     * 
    **/
    distinct?: Enumerable<TransfersScalarFieldEnum>
  }


  /**
   * transfers findMany
   */
  export type transfersFindManyArgs = {
    /**
     * Select specific fields to fetch from the transfers
     * 
    **/
    select?: transfersSelect | null
    /**
     * Filter, which transfers to fetch.
     * 
    **/
    where?: transfersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of transfers to fetch.
     * 
    **/
    orderBy?: Enumerable<transfersOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing transfers.
     * 
    **/
    cursor?: transfersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` transfers from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` transfers.
     * 
    **/
    skip?: number
    distinct?: Enumerable<TransfersScalarFieldEnum>
  }


  /**
   * transfers create
   */
  export type transfersCreateArgs = {
    /**
     * Select specific fields to fetch from the transfers
     * 
    **/
    select?: transfersSelect | null
    /**
     * The data needed to create a transfers.
     * 
    **/
    data: XOR<transfersCreateInput, transfersUncheckedCreateInput>
  }


  /**
   * transfers createMany
   */
  export type transfersCreateManyArgs = {
    data: Enumerable<transfersCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * transfers update
   */
  export type transfersUpdateArgs = {
    /**
     * Select specific fields to fetch from the transfers
     * 
    **/
    select?: transfersSelect | null
    /**
     * The data needed to update a transfers.
     * 
    **/
    data: XOR<transfersUpdateInput, transfersUncheckedUpdateInput>
    /**
     * Choose, which transfers to update.
     * 
    **/
    where: transfersWhereUniqueInput
  }


  /**
   * transfers updateMany
   */
  export type transfersUpdateManyArgs = {
    data: XOR<transfersUpdateManyMutationInput, transfersUncheckedUpdateManyInput>
    where?: transfersWhereInput
  }


  /**
   * transfers upsert
   */
  export type transfersUpsertArgs = {
    /**
     * Select specific fields to fetch from the transfers
     * 
    **/
    select?: transfersSelect | null
    /**
     * The filter to search for the transfers to update in case it exists.
     * 
    **/
    where: transfersWhereUniqueInput
    /**
     * In case the transfers found by the `where` argument doesn't exist, create a new transfers with this data.
     * 
    **/
    create: XOR<transfersCreateInput, transfersUncheckedCreateInput>
    /**
     * In case the transfers was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<transfersUpdateInput, transfersUncheckedUpdateInput>
  }


  /**
   * transfers delete
   */
  export type transfersDeleteArgs = {
    /**
     * Select specific fields to fetch from the transfers
     * 
    **/
    select?: transfersSelect | null
    /**
     * Filter which transfers to delete.
     * 
    **/
    where: transfersWhereUniqueInput
  }


  /**
   * transfers deleteMany
   */
  export type transfersDeleteManyArgs = {
    where?: transfersWhereInput
  }


  /**
   * transfers without action
   */
  export type transfersArgs = {
    /**
     * Select specific fields to fetch from the transfers
     * 
    **/
    select?: transfersSelect | null
  }



  /**
   * Model acces_tokens
   */


  export type AggregateAcces_tokens = {
    _count: Acces_tokensCountAggregateOutputType | null
    count: Acces_tokensCountAggregateOutputType | null
    _avg: Acces_tokensAvgAggregateOutputType | null
    avg: Acces_tokensAvgAggregateOutputType | null
    _sum: Acces_tokensSumAggregateOutputType | null
    sum: Acces_tokensSumAggregateOutputType | null
    _min: Acces_tokensMinAggregateOutputType | null
    min: Acces_tokensMinAggregateOutputType | null
    _max: Acces_tokensMaxAggregateOutputType | null
    max: Acces_tokensMaxAggregateOutputType | null
  }

  export type Acces_tokensAvgAggregateOutputType = {
    id: number | null
    user_id: number | null
    visible: number | null
  }

  export type Acces_tokensSumAggregateOutputType = {
    id: number | null
    user_id: number | null
    visible: number | null
  }

  export type Acces_tokensMinAggregateOutputType = {
    id: number | null
    user_id: number | null
    token: string | null
    status: string | null
    createAt: Date | null
    updateAt: Date | null
    visible: number | null
  }

  export type Acces_tokensMaxAggregateOutputType = {
    id: number | null
    user_id: number | null
    token: string | null
    status: string | null
    createAt: Date | null
    updateAt: Date | null
    visible: number | null
  }

  export type Acces_tokensCountAggregateOutputType = {
    id: number
    user_id: number
    token: number
    status: number
    createAt: number
    updateAt: number
    visible: number
    _all: number
  }


  export type Acces_tokensAvgAggregateInputType = {
    id?: true
    user_id?: true
    visible?: true
  }

  export type Acces_tokensSumAggregateInputType = {
    id?: true
    user_id?: true
    visible?: true
  }

  export type Acces_tokensMinAggregateInputType = {
    id?: true
    user_id?: true
    token?: true
    status?: true
    createAt?: true
    updateAt?: true
    visible?: true
  }

  export type Acces_tokensMaxAggregateInputType = {
    id?: true
    user_id?: true
    token?: true
    status?: true
    createAt?: true
    updateAt?: true
    visible?: true
  }

  export type Acces_tokensCountAggregateInputType = {
    id?: true
    user_id?: true
    token?: true
    status?: true
    createAt?: true
    updateAt?: true
    visible?: true
    _all?: true
  }

  export type Acces_tokensAggregateArgs = {
    /**
     * Filter which acces_tokens to aggregate.
     * 
    **/
    where?: acces_tokensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of acces_tokens to fetch.
     * 
    **/
    orderBy?: Enumerable<acces_tokensOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: acces_tokensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` acces_tokens from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` acces_tokens.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned acces_tokens
    **/
    _count?: true | Acces_tokensCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | Acces_tokensCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Acces_tokensAvgAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_avg`
    **/
    avg?: Acces_tokensAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Acces_tokensSumAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_sum`
    **/
    sum?: Acces_tokensSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Acces_tokensMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: Acces_tokensMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Acces_tokensMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: Acces_tokensMaxAggregateInputType
  }

  export type GetAcces_tokensAggregateType<T extends Acces_tokensAggregateArgs> = {
        [P in keyof T & keyof AggregateAcces_tokens]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAcces_tokens[P]>
      : GetScalarType<T[P], AggregateAcces_tokens[P]>
  }


    
    
  export type Acces_tokensGroupByArgs = {
    where?: acces_tokensWhereInput
    orderBy?: Enumerable<acces_tokensOrderByInput>
    by: Array<Acces_tokensScalarFieldEnum>
    having?: acces_tokensScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Acces_tokensCountAggregateInputType | true
    _avg?: Acces_tokensAvgAggregateInputType
    _sum?: Acces_tokensSumAggregateInputType
    _min?: Acces_tokensMinAggregateInputType
    _max?: Acces_tokensMaxAggregateInputType
  }


  export type Acces_tokensGroupByOutputType = {
    id: number
    user_id: number
    token: string
    status: string
    createAt: Date
    updateAt: Date
    visible: number
    _count: Acces_tokensCountAggregateOutputType | null
    _avg: Acces_tokensAvgAggregateOutputType | null
    _sum: Acces_tokensSumAggregateOutputType | null
    _min: Acces_tokensMinAggregateOutputType | null
    _max: Acces_tokensMaxAggregateOutputType | null
  }

  type GetAcces_tokensGroupByPayload<T extends Acces_tokensGroupByArgs> = Promise<
    Array<
      PickArray<Acces_tokensGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof Acces_tokensGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], Acces_tokensGroupByOutputType[P]> 
            : GetScalarType<T[P], Acces_tokensGroupByOutputType[P]>
        }
      > 
    >


  export type acces_tokensSelect = {
    id?: boolean
    user_id?: boolean
    token?: boolean
    status?: boolean
    createAt?: boolean
    updateAt?: boolean
    visible?: boolean
  }

  export type acces_tokensGetPayload<
    S extends boolean | null | undefined | acces_tokensArgs,
    U = keyof S
      > = S extends true
        ? acces_tokens
    : S extends undefined
    ? never
    : S extends acces_tokensArgs | acces_tokensFindManyArgs
    ?'include' extends U
    ? acces_tokens 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof acces_tokens ?acces_tokens [P]
  : 
     never
  } 
    : acces_tokens
  : acces_tokens


  type acces_tokensCountArgs = Merge<
    Omit<acces_tokensFindManyArgs, 'select' | 'include'> & {
      select?: Acces_tokensCountAggregateInputType | true
    }
  >

  export interface acces_tokensDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Acces_tokens that matches the filter.
     * @param {acces_tokensFindUniqueArgs} args - Arguments to find a Acces_tokens
     * @example
     * // Get one Acces_tokens
     * const acces_tokens = await prisma.acces_tokens.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends acces_tokensFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, acces_tokensFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'acces_tokens'> extends True ? CheckSelect<T, Prisma__acces_tokensClient<acces_tokens>, Prisma__acces_tokensClient<acces_tokensGetPayload<T>>> : CheckSelect<T, Prisma__acces_tokensClient<acces_tokens | null >, Prisma__acces_tokensClient<acces_tokensGetPayload<T> | null >>

    /**
     * Find the first Acces_tokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {acces_tokensFindFirstArgs} args - Arguments to find a Acces_tokens
     * @example
     * // Get one Acces_tokens
     * const acces_tokens = await prisma.acces_tokens.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends acces_tokensFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, acces_tokensFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'acces_tokens'> extends True ? CheckSelect<T, Prisma__acces_tokensClient<acces_tokens>, Prisma__acces_tokensClient<acces_tokensGetPayload<T>>> : CheckSelect<T, Prisma__acces_tokensClient<acces_tokens | null >, Prisma__acces_tokensClient<acces_tokensGetPayload<T> | null >>

    /**
     * Find zero or more Acces_tokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {acces_tokensFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Acces_tokens
     * const acces_tokens = await prisma.acces_tokens.findMany()
     * 
     * // Get first 10 Acces_tokens
     * const acces_tokens = await prisma.acces_tokens.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const acces_tokensWithIdOnly = await prisma.acces_tokens.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends acces_tokensFindManyArgs>(
      args?: SelectSubset<T, acces_tokensFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<acces_tokens>>, PrismaPromise<Array<acces_tokensGetPayload<T>>>>

    /**
     * Create a Acces_tokens.
     * @param {acces_tokensCreateArgs} args - Arguments to create a Acces_tokens.
     * @example
     * // Create one Acces_tokens
     * const Acces_tokens = await prisma.acces_tokens.create({
     *   data: {
     *     // ... data to create a Acces_tokens
     *   }
     * })
     * 
    **/
    create<T extends acces_tokensCreateArgs>(
      args: SelectSubset<T, acces_tokensCreateArgs>
    ): CheckSelect<T, Prisma__acces_tokensClient<acces_tokens>, Prisma__acces_tokensClient<acces_tokensGetPayload<T>>>

    /**
     * Create many Acces_tokens.
     *     @param {acces_tokensCreateManyArgs} args - Arguments to create many Acces_tokens.
     *     @example
     *     // Create many Acces_tokens
     *     const acces_tokens = await prisma.acces_tokens.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends acces_tokensCreateManyArgs>(
      args?: SelectSubset<T, acces_tokensCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Acces_tokens.
     * @param {acces_tokensDeleteArgs} args - Arguments to delete one Acces_tokens.
     * @example
     * // Delete one Acces_tokens
     * const Acces_tokens = await prisma.acces_tokens.delete({
     *   where: {
     *     // ... filter to delete one Acces_tokens
     *   }
     * })
     * 
    **/
    delete<T extends acces_tokensDeleteArgs>(
      args: SelectSubset<T, acces_tokensDeleteArgs>
    ): CheckSelect<T, Prisma__acces_tokensClient<acces_tokens>, Prisma__acces_tokensClient<acces_tokensGetPayload<T>>>

    /**
     * Update one Acces_tokens.
     * @param {acces_tokensUpdateArgs} args - Arguments to update one Acces_tokens.
     * @example
     * // Update one Acces_tokens
     * const acces_tokens = await prisma.acces_tokens.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends acces_tokensUpdateArgs>(
      args: SelectSubset<T, acces_tokensUpdateArgs>
    ): CheckSelect<T, Prisma__acces_tokensClient<acces_tokens>, Prisma__acces_tokensClient<acces_tokensGetPayload<T>>>

    /**
     * Delete zero or more Acces_tokens.
     * @param {acces_tokensDeleteManyArgs} args - Arguments to filter Acces_tokens to delete.
     * @example
     * // Delete a few Acces_tokens
     * const { count } = await prisma.acces_tokens.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends acces_tokensDeleteManyArgs>(
      args?: SelectSubset<T, acces_tokensDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Acces_tokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {acces_tokensUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Acces_tokens
     * const acces_tokens = await prisma.acces_tokens.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends acces_tokensUpdateManyArgs>(
      args: SelectSubset<T, acces_tokensUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Acces_tokens.
     * @param {acces_tokensUpsertArgs} args - Arguments to update or create a Acces_tokens.
     * @example
     * // Update or create a Acces_tokens
     * const acces_tokens = await prisma.acces_tokens.upsert({
     *   create: {
     *     // ... data to create a Acces_tokens
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Acces_tokens we want to update
     *   }
     * })
    **/
    upsert<T extends acces_tokensUpsertArgs>(
      args: SelectSubset<T, acces_tokensUpsertArgs>
    ): CheckSelect<T, Prisma__acces_tokensClient<acces_tokens>, Prisma__acces_tokensClient<acces_tokensGetPayload<T>>>

    /**
     * Count the number of Acces_tokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {acces_tokensCountArgs} args - Arguments to filter Acces_tokens to count.
     * @example
     * // Count the number of Acces_tokens
     * const count = await prisma.acces_tokens.count({
     *   where: {
     *     // ... the filter for the Acces_tokens we want to count
     *   }
     * })
    **/
    count<T extends acces_tokensCountArgs>(
      args?: Subset<T, acces_tokensCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Acces_tokensCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Acces_tokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Acces_tokensAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Acces_tokensAggregateArgs>(args: Subset<T, Acces_tokensAggregateArgs>): PrismaPromise<GetAcces_tokensAggregateType<T>>

    /**
     * Group by Acces_tokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Acces_tokensGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Acces_tokensGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Acces_tokensGroupByArgs['orderBy'] }
        : { orderBy?: Acces_tokensGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Acces_tokensGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAcces_tokensGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for acces_tokens.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__acces_tokensClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * acces_tokens findUnique
   */
  export type acces_tokensFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the acces_tokens
     * 
    **/
    select?: acces_tokensSelect | null
    /**
     * Throw an Error if a acces_tokens can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which acces_tokens to fetch.
     * 
    **/
    where: acces_tokensWhereUniqueInput
  }


  /**
   * acces_tokens findFirst
   */
  export type acces_tokensFindFirstArgs = {
    /**
     * Select specific fields to fetch from the acces_tokens
     * 
    **/
    select?: acces_tokensSelect | null
    /**
     * Throw an Error if a acces_tokens can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which acces_tokens to fetch.
     * 
    **/
    where?: acces_tokensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of acces_tokens to fetch.
     * 
    **/
    orderBy?: Enumerable<acces_tokensOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for acces_tokens.
     * 
    **/
    cursor?: acces_tokensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` acces_tokens from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` acces_tokens.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of acces_tokens.
     * 
    **/
    distinct?: Enumerable<Acces_tokensScalarFieldEnum>
  }


  /**
   * acces_tokens findMany
   */
  export type acces_tokensFindManyArgs = {
    /**
     * Select specific fields to fetch from the acces_tokens
     * 
    **/
    select?: acces_tokensSelect | null
    /**
     * Filter, which acces_tokens to fetch.
     * 
    **/
    where?: acces_tokensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of acces_tokens to fetch.
     * 
    **/
    orderBy?: Enumerable<acces_tokensOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing acces_tokens.
     * 
    **/
    cursor?: acces_tokensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` acces_tokens from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` acces_tokens.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Acces_tokensScalarFieldEnum>
  }


  /**
   * acces_tokens create
   */
  export type acces_tokensCreateArgs = {
    /**
     * Select specific fields to fetch from the acces_tokens
     * 
    **/
    select?: acces_tokensSelect | null
    /**
     * The data needed to create a acces_tokens.
     * 
    **/
    data: XOR<acces_tokensCreateInput, acces_tokensUncheckedCreateInput>
  }


  /**
   * acces_tokens createMany
   */
  export type acces_tokensCreateManyArgs = {
    data: Enumerable<acces_tokensCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * acces_tokens update
   */
  export type acces_tokensUpdateArgs = {
    /**
     * Select specific fields to fetch from the acces_tokens
     * 
    **/
    select?: acces_tokensSelect | null
    /**
     * The data needed to update a acces_tokens.
     * 
    **/
    data: XOR<acces_tokensUpdateInput, acces_tokensUncheckedUpdateInput>
    /**
     * Choose, which acces_tokens to update.
     * 
    **/
    where: acces_tokensWhereUniqueInput
  }


  /**
   * acces_tokens updateMany
   */
  export type acces_tokensUpdateManyArgs = {
    data: XOR<acces_tokensUpdateManyMutationInput, acces_tokensUncheckedUpdateManyInput>
    where?: acces_tokensWhereInput
  }


  /**
   * acces_tokens upsert
   */
  export type acces_tokensUpsertArgs = {
    /**
     * Select specific fields to fetch from the acces_tokens
     * 
    **/
    select?: acces_tokensSelect | null
    /**
     * The filter to search for the acces_tokens to update in case it exists.
     * 
    **/
    where: acces_tokensWhereUniqueInput
    /**
     * In case the acces_tokens found by the `where` argument doesn't exist, create a new acces_tokens with this data.
     * 
    **/
    create: XOR<acces_tokensCreateInput, acces_tokensUncheckedCreateInput>
    /**
     * In case the acces_tokens was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<acces_tokensUpdateInput, acces_tokensUncheckedUpdateInput>
  }


  /**
   * acces_tokens delete
   */
  export type acces_tokensDeleteArgs = {
    /**
     * Select specific fields to fetch from the acces_tokens
     * 
    **/
    select?: acces_tokensSelect | null
    /**
     * Filter which acces_tokens to delete.
     * 
    **/
    where: acces_tokensWhereUniqueInput
  }


  /**
   * acces_tokens deleteMany
   */
  export type acces_tokensDeleteManyArgs = {
    where?: acces_tokensWhereInput
  }


  /**
   * acces_tokens without action
   */
  export type acces_tokensArgs = {
    /**
     * Select specific fields to fetch from the acces_tokens
     * 
    **/
    select?: acces_tokensSelect | null
  }



  /**
   * Model bills
   */


  export type AggregateBills = {
    _count: BillsCountAggregateOutputType | null
    count: BillsCountAggregateOutputType | null
    _avg: BillsAvgAggregateOutputType | null
    avg: BillsAvgAggregateOutputType | null
    _sum: BillsSumAggregateOutputType | null
    sum: BillsSumAggregateOutputType | null
    _min: BillsMinAggregateOutputType | null
    min: BillsMinAggregateOutputType | null
    _max: BillsMaxAggregateOutputType | null
    max: BillsMaxAggregateOutputType | null
  }

  export type BillsAvgAggregateOutputType = {
    id: number | null
    user_id: number | null
    bill_id: number | null
    amount: number | null
    visible: number | null
  }

  export type BillsSumAggregateOutputType = {
    id: number | null
    user_id: number | null
    bill_id: number | null
    amount: number | null
    visible: number | null
  }

  export type BillsMinAggregateOutputType = {
    id: number | null
    user_id: number | null
    bill_id: number | null
    bill_type: string | null
    amount: number | null
    description: string | null
    createAt: Date | null
    updateAt: Date | null
    status: string | null
    access_details: string | null
    visible: number | null
  }

  export type BillsMaxAggregateOutputType = {
    id: number | null
    user_id: number | null
    bill_id: number | null
    bill_type: string | null
    amount: number | null
    description: string | null
    createAt: Date | null
    updateAt: Date | null
    status: string | null
    access_details: string | null
    visible: number | null
  }

  export type BillsCountAggregateOutputType = {
    id: number
    user_id: number
    bill_id: number
    bill_type: number
    amount: number
    description: number
    createAt: number
    updateAt: number
    status: number
    access_details: number
    visible: number
    _all: number
  }


  export type BillsAvgAggregateInputType = {
    id?: true
    user_id?: true
    bill_id?: true
    amount?: true
    visible?: true
  }

  export type BillsSumAggregateInputType = {
    id?: true
    user_id?: true
    bill_id?: true
    amount?: true
    visible?: true
  }

  export type BillsMinAggregateInputType = {
    id?: true
    user_id?: true
    bill_id?: true
    bill_type?: true
    amount?: true
    description?: true
    createAt?: true
    updateAt?: true
    status?: true
    access_details?: true
    visible?: true
  }

  export type BillsMaxAggregateInputType = {
    id?: true
    user_id?: true
    bill_id?: true
    bill_type?: true
    amount?: true
    description?: true
    createAt?: true
    updateAt?: true
    status?: true
    access_details?: true
    visible?: true
  }

  export type BillsCountAggregateInputType = {
    id?: true
    user_id?: true
    bill_id?: true
    bill_type?: true
    amount?: true
    description?: true
    createAt?: true
    updateAt?: true
    status?: true
    access_details?: true
    visible?: true
    _all?: true
  }

  export type BillsAggregateArgs = {
    /**
     * Filter which bills to aggregate.
     * 
    **/
    where?: billsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of bills to fetch.
     * 
    **/
    orderBy?: Enumerable<billsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: billsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` bills from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` bills.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned bills
    **/
    _count?: true | BillsCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | BillsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BillsAvgAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_avg`
    **/
    avg?: BillsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BillsSumAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_sum`
    **/
    sum?: BillsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BillsMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: BillsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BillsMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: BillsMaxAggregateInputType
  }

  export type GetBillsAggregateType<T extends BillsAggregateArgs> = {
        [P in keyof T & keyof AggregateBills]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBills[P]>
      : GetScalarType<T[P], AggregateBills[P]>
  }


    
    
  export type BillsGroupByArgs = {
    where?: billsWhereInput
    orderBy?: Enumerable<billsOrderByInput>
    by: Array<BillsScalarFieldEnum>
    having?: billsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BillsCountAggregateInputType | true
    _avg?: BillsAvgAggregateInputType
    _sum?: BillsSumAggregateInputType
    _min?: BillsMinAggregateInputType
    _max?: BillsMaxAggregateInputType
  }


  export type BillsGroupByOutputType = {
    id: number
    user_id: number
    bill_id: number
    bill_type: string
    amount: number
    description: string
    createAt: Date
    updateAt: Date
    status: string
    access_details: string
    visible: number
    _count: BillsCountAggregateOutputType | null
    _avg: BillsAvgAggregateOutputType | null
    _sum: BillsSumAggregateOutputType | null
    _min: BillsMinAggregateOutputType | null
    _max: BillsMaxAggregateOutputType | null
  }

  type GetBillsGroupByPayload<T extends BillsGroupByArgs> = Promise<
    Array<
      PickArray<BillsGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof BillsGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], BillsGroupByOutputType[P]> 
            : GetScalarType<T[P], BillsGroupByOutputType[P]>
        }
      > 
    >


  export type billsSelect = {
    id?: boolean
    user_id?: boolean
    bill_id?: boolean
    bill_type?: boolean
    amount?: boolean
    description?: boolean
    createAt?: boolean
    updateAt?: boolean
    status?: boolean
    access_details?: boolean
    visible?: boolean
  }

  export type billsGetPayload<
    S extends boolean | null | undefined | billsArgs,
    U = keyof S
      > = S extends true
        ? bills
    : S extends undefined
    ? never
    : S extends billsArgs | billsFindManyArgs
    ?'include' extends U
    ? bills 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof bills ?bills [P]
  : 
     never
  } 
    : bills
  : bills


  type billsCountArgs = Merge<
    Omit<billsFindManyArgs, 'select' | 'include'> & {
      select?: BillsCountAggregateInputType | true
    }
  >

  export interface billsDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Bills that matches the filter.
     * @param {billsFindUniqueArgs} args - Arguments to find a Bills
     * @example
     * // Get one Bills
     * const bills = await prisma.bills.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends billsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, billsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'bills'> extends True ? CheckSelect<T, Prisma__billsClient<bills>, Prisma__billsClient<billsGetPayload<T>>> : CheckSelect<T, Prisma__billsClient<bills | null >, Prisma__billsClient<billsGetPayload<T> | null >>

    /**
     * Find the first Bills that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {billsFindFirstArgs} args - Arguments to find a Bills
     * @example
     * // Get one Bills
     * const bills = await prisma.bills.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends billsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, billsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'bills'> extends True ? CheckSelect<T, Prisma__billsClient<bills>, Prisma__billsClient<billsGetPayload<T>>> : CheckSelect<T, Prisma__billsClient<bills | null >, Prisma__billsClient<billsGetPayload<T> | null >>

    /**
     * Find zero or more Bills that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {billsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Bills
     * const bills = await prisma.bills.findMany()
     * 
     * // Get first 10 Bills
     * const bills = await prisma.bills.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const billsWithIdOnly = await prisma.bills.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends billsFindManyArgs>(
      args?: SelectSubset<T, billsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<bills>>, PrismaPromise<Array<billsGetPayload<T>>>>

    /**
     * Create a Bills.
     * @param {billsCreateArgs} args - Arguments to create a Bills.
     * @example
     * // Create one Bills
     * const Bills = await prisma.bills.create({
     *   data: {
     *     // ... data to create a Bills
     *   }
     * })
     * 
    **/
    create<T extends billsCreateArgs>(
      args: SelectSubset<T, billsCreateArgs>
    ): CheckSelect<T, Prisma__billsClient<bills>, Prisma__billsClient<billsGetPayload<T>>>

    /**
     * Create many Bills.
     *     @param {billsCreateManyArgs} args - Arguments to create many Bills.
     *     @example
     *     // Create many Bills
     *     const bills = await prisma.bills.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends billsCreateManyArgs>(
      args?: SelectSubset<T, billsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Bills.
     * @param {billsDeleteArgs} args - Arguments to delete one Bills.
     * @example
     * // Delete one Bills
     * const Bills = await prisma.bills.delete({
     *   where: {
     *     // ... filter to delete one Bills
     *   }
     * })
     * 
    **/
    delete<T extends billsDeleteArgs>(
      args: SelectSubset<T, billsDeleteArgs>
    ): CheckSelect<T, Prisma__billsClient<bills>, Prisma__billsClient<billsGetPayload<T>>>

    /**
     * Update one Bills.
     * @param {billsUpdateArgs} args - Arguments to update one Bills.
     * @example
     * // Update one Bills
     * const bills = await prisma.bills.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends billsUpdateArgs>(
      args: SelectSubset<T, billsUpdateArgs>
    ): CheckSelect<T, Prisma__billsClient<bills>, Prisma__billsClient<billsGetPayload<T>>>

    /**
     * Delete zero or more Bills.
     * @param {billsDeleteManyArgs} args - Arguments to filter Bills to delete.
     * @example
     * // Delete a few Bills
     * const { count } = await prisma.bills.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends billsDeleteManyArgs>(
      args?: SelectSubset<T, billsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Bills.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {billsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Bills
     * const bills = await prisma.bills.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends billsUpdateManyArgs>(
      args: SelectSubset<T, billsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Bills.
     * @param {billsUpsertArgs} args - Arguments to update or create a Bills.
     * @example
     * // Update or create a Bills
     * const bills = await prisma.bills.upsert({
     *   create: {
     *     // ... data to create a Bills
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Bills we want to update
     *   }
     * })
    **/
    upsert<T extends billsUpsertArgs>(
      args: SelectSubset<T, billsUpsertArgs>
    ): CheckSelect<T, Prisma__billsClient<bills>, Prisma__billsClient<billsGetPayload<T>>>

    /**
     * Count the number of Bills.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {billsCountArgs} args - Arguments to filter Bills to count.
     * @example
     * // Count the number of Bills
     * const count = await prisma.bills.count({
     *   where: {
     *     // ... the filter for the Bills we want to count
     *   }
     * })
    **/
    count<T extends billsCountArgs>(
      args?: Subset<T, billsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BillsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Bills.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BillsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BillsAggregateArgs>(args: Subset<T, BillsAggregateArgs>): PrismaPromise<GetBillsAggregateType<T>>

    /**
     * Group by Bills.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BillsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BillsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BillsGroupByArgs['orderBy'] }
        : { orderBy?: BillsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BillsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBillsGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for bills.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__billsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * bills findUnique
   */
  export type billsFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the bills
     * 
    **/
    select?: billsSelect | null
    /**
     * Throw an Error if a bills can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which bills to fetch.
     * 
    **/
    where: billsWhereUniqueInput
  }


  /**
   * bills findFirst
   */
  export type billsFindFirstArgs = {
    /**
     * Select specific fields to fetch from the bills
     * 
    **/
    select?: billsSelect | null
    /**
     * Throw an Error if a bills can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which bills to fetch.
     * 
    **/
    where?: billsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of bills to fetch.
     * 
    **/
    orderBy?: Enumerable<billsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for bills.
     * 
    **/
    cursor?: billsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` bills from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` bills.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of bills.
     * 
    **/
    distinct?: Enumerable<BillsScalarFieldEnum>
  }


  /**
   * bills findMany
   */
  export type billsFindManyArgs = {
    /**
     * Select specific fields to fetch from the bills
     * 
    **/
    select?: billsSelect | null
    /**
     * Filter, which bills to fetch.
     * 
    **/
    where?: billsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of bills to fetch.
     * 
    **/
    orderBy?: Enumerable<billsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing bills.
     * 
    **/
    cursor?: billsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` bills from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` bills.
     * 
    **/
    skip?: number
    distinct?: Enumerable<BillsScalarFieldEnum>
  }


  /**
   * bills create
   */
  export type billsCreateArgs = {
    /**
     * Select specific fields to fetch from the bills
     * 
    **/
    select?: billsSelect | null
    /**
     * The data needed to create a bills.
     * 
    **/
    data: XOR<billsCreateInput, billsUncheckedCreateInput>
  }


  /**
   * bills createMany
   */
  export type billsCreateManyArgs = {
    data: Enumerable<billsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * bills update
   */
  export type billsUpdateArgs = {
    /**
     * Select specific fields to fetch from the bills
     * 
    **/
    select?: billsSelect | null
    /**
     * The data needed to update a bills.
     * 
    **/
    data: XOR<billsUpdateInput, billsUncheckedUpdateInput>
    /**
     * Choose, which bills to update.
     * 
    **/
    where: billsWhereUniqueInput
  }


  /**
   * bills updateMany
   */
  export type billsUpdateManyArgs = {
    data: XOR<billsUpdateManyMutationInput, billsUncheckedUpdateManyInput>
    where?: billsWhereInput
  }


  /**
   * bills upsert
   */
  export type billsUpsertArgs = {
    /**
     * Select specific fields to fetch from the bills
     * 
    **/
    select?: billsSelect | null
    /**
     * The filter to search for the bills to update in case it exists.
     * 
    **/
    where: billsWhereUniqueInput
    /**
     * In case the bills found by the `where` argument doesn't exist, create a new bills with this data.
     * 
    **/
    create: XOR<billsCreateInput, billsUncheckedCreateInput>
    /**
     * In case the bills was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<billsUpdateInput, billsUncheckedUpdateInput>
  }


  /**
   * bills delete
   */
  export type billsDeleteArgs = {
    /**
     * Select specific fields to fetch from the bills
     * 
    **/
    select?: billsSelect | null
    /**
     * Filter which bills to delete.
     * 
    **/
    where: billsWhereUniqueInput
  }


  /**
   * bills deleteMany
   */
  export type billsDeleteManyArgs = {
    where?: billsWhereInput
  }


  /**
   * bills without action
   */
  export type billsArgs = {
    /**
     * Select specific fields to fetch from the bills
     * 
    **/
    select?: billsSelect | null
  }



  /**
   * Model users
   */


  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
    max: UsersMaxAggregateOutputType | null
  }

  export type UsersAvgAggregateOutputType = {
    id: number | null
    pin: number | null
    visibility: number | null
    wallet_balance: number | null
  }

  export type UsersSumAggregateOutputType = {
    id: number | null
    pin: number | null
    visibility: number | null
    wallet_balance: number | null
  }

  export type UsersMinAggregateOutputType = {
    id: number | null
    email: string | null
    name: string | null
    password: string | null
    ccode: string | null
    fingerprint: string | null
    phone_number: string | null
    pin: number | null
    createAt: Date | null
    updateAt: Date | null
    visibility: number | null
    wallet_balance: number | null
  }

  export type UsersMaxAggregateOutputType = {
    id: number | null
    email: string | null
    name: string | null
    password: string | null
    ccode: string | null
    fingerprint: string | null
    phone_number: string | null
    pin: number | null
    createAt: Date | null
    updateAt: Date | null
    visibility: number | null
    wallet_balance: number | null
  }

  export type UsersCountAggregateOutputType = {
    id: number
    email: number
    name: number
    password: number
    ccode: number
    fingerprint: number
    phone_number: number
    pin: number
    createAt: number
    updateAt: number
    visibility: number
    wallet_balance: number
    _all: number
  }


  export type UsersAvgAggregateInputType = {
    id?: true
    pin?: true
    visibility?: true
    wallet_balance?: true
  }

  export type UsersSumAggregateInputType = {
    id?: true
    pin?: true
    visibility?: true
    wallet_balance?: true
  }

  export type UsersMinAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    ccode?: true
    fingerprint?: true
    phone_number?: true
    pin?: true
    createAt?: true
    updateAt?: true
    visibility?: true
    wallet_balance?: true
  }

  export type UsersMaxAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    ccode?: true
    fingerprint?: true
    phone_number?: true
    pin?: true
    createAt?: true
    updateAt?: true
    visibility?: true
    wallet_balance?: true
  }

  export type UsersCountAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    ccode?: true
    fingerprint?: true
    phone_number?: true
    pin?: true
    createAt?: true
    updateAt?: true
    visibility?: true
    wallet_balance?: true
    _all?: true
  }

  export type UsersAggregateArgs = {
    /**
     * Filter which users to aggregate.
     * 
    **/
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     * 
    **/
    orderBy?: Enumerable<usersOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsersAvgAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_avg`
    **/
    avg?: UsersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsersSumAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_sum`
    **/
    sum?: UsersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }


    
    
  export type UsersGroupByArgs = {
    where?: usersWhereInput
    orderBy?: Enumerable<usersOrderByInput>
    by: Array<UsersScalarFieldEnum>
    having?: usersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _avg?: UsersAvgAggregateInputType
    _sum?: UsersSumAggregateInputType
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }


  export type UsersGroupByOutputType = {
    id: number
    email: string
    name: string | null
    password: string
    ccode: string
    fingerprint: string | null
    phone_number: string
    pin: number
    createAt: Date
    updateAt: Date
    visibility: number
    wallet_balance: number
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends UsersGroupByArgs> = Promise<
    Array<
      PickArray<UsersGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], UsersGroupByOutputType[P]> 
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      > 
    >


  export type usersSelect = {
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    ccode?: boolean
    fingerprint?: boolean
    phone_number?: boolean
    pin?: boolean
    createAt?: boolean
    updateAt?: boolean
    visibility?: boolean
    wallet_balance?: boolean
  }

  export type usersGetPayload<
    S extends boolean | null | undefined | usersArgs,
    U = keyof S
      > = S extends true
        ? users
    : S extends undefined
    ? never
    : S extends usersArgs | usersFindManyArgs
    ?'include' extends U
    ? users 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof users ?users [P]
  : 
     never
  } 
    : users
  : users


  type usersCountArgs = Merge<
    Omit<usersFindManyArgs, 'select' | 'include'> & {
      select?: UsersCountAggregateInputType | true
    }
  >

  export interface usersDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Users that matches the filter.
     * @param {usersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends usersFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, usersFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'users'> extends True ? CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>> : CheckSelect<T, Prisma__usersClient<users | null >, Prisma__usersClient<usersGetPayload<T> | null >>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends usersFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, usersFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'users'> extends True ? CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>> : CheckSelect<T, Prisma__usersClient<users | null >, Prisma__usersClient<usersGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usersWithIdOnly = await prisma.users.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends usersFindManyArgs>(
      args?: SelectSubset<T, usersFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<users>>, PrismaPromise<Array<usersGetPayload<T>>>>

    /**
     * Create a Users.
     * @param {usersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
    **/
    create<T extends usersCreateArgs>(
      args: SelectSubset<T, usersCreateArgs>
    ): CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>>

    /**
     * Create many Users.
     *     @param {usersCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const users = await prisma.users.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends usersCreateManyArgs>(
      args?: SelectSubset<T, usersCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Users.
     * @param {usersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
    **/
    delete<T extends usersDeleteArgs>(
      args: SelectSubset<T, usersDeleteArgs>
    ): CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>>

    /**
     * Update one Users.
     * @param {usersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends usersUpdateArgs>(
      args: SelectSubset<T, usersUpdateArgs>
    ): CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {usersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends usersDeleteManyArgs>(
      args?: SelectSubset<T, usersDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends usersUpdateManyArgs>(
      args: SelectSubset<T, usersUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {usersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
    **/
    upsert<T extends usersUpsertArgs>(
      args: SelectSubset<T, usersUpsertArgs>
    ): CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends usersCountArgs>(
      args?: Subset<T, usersCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsersGroupByArgs['orderBy'] }
        : { orderBy?: UsersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__usersClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * users findUnique
   */
  export type usersFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Throw an Error if a users can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which users to fetch.
     * 
    **/
    where: usersWhereUniqueInput
  }


  /**
   * users findFirst
   */
  export type usersFindFirstArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Throw an Error if a users can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which users to fetch.
     * 
    **/
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     * 
    **/
    orderBy?: Enumerable<usersOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     * 
    **/
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     * 
    **/
    distinct?: Enumerable<UsersScalarFieldEnum>
  }


  /**
   * users findMany
   */
  export type usersFindManyArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Filter, which users to fetch.
     * 
    **/
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     * 
    **/
    orderBy?: Enumerable<usersOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     * 
    **/
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UsersScalarFieldEnum>
  }


  /**
   * users create
   */
  export type usersCreateArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * The data needed to create a users.
     * 
    **/
    data: XOR<usersCreateInput, usersUncheckedCreateInput>
  }


  /**
   * users createMany
   */
  export type usersCreateManyArgs = {
    data: Enumerable<usersCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * users update
   */
  export type usersUpdateArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * The data needed to update a users.
     * 
    **/
    data: XOR<usersUpdateInput, usersUncheckedUpdateInput>
    /**
     * Choose, which users to update.
     * 
    **/
    where: usersWhereUniqueInput
  }


  /**
   * users updateMany
   */
  export type usersUpdateManyArgs = {
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyInput>
    where?: usersWhereInput
  }


  /**
   * users upsert
   */
  export type usersUpsertArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * The filter to search for the users to update in case it exists.
     * 
    **/
    where: usersWhereUniqueInput
    /**
     * In case the users found by the `where` argument doesn't exist, create a new users with this data.
     * 
    **/
    create: XOR<usersCreateInput, usersUncheckedCreateInput>
    /**
     * In case the users was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<usersUpdateInput, usersUncheckedUpdateInput>
  }


  /**
   * users delete
   */
  export type usersDeleteArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Filter which users to delete.
     * 
    **/
    where: usersWhereUniqueInput
  }


  /**
   * users deleteMany
   */
  export type usersDeleteManyArgs = {
    where?: usersWhereInput
  }


  /**
   * users without action
   */
  export type usersArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
  }



  /**
   * Model transactions
   */


  export type AggregateTransactions = {
    _count: TransactionsCountAggregateOutputType | null
    count: TransactionsCountAggregateOutputType | null
    _avg: TransactionsAvgAggregateOutputType | null
    avg: TransactionsAvgAggregateOutputType | null
    _sum: TransactionsSumAggregateOutputType | null
    sum: TransactionsSumAggregateOutputType | null
    _min: TransactionsMinAggregateOutputType | null
    min: TransactionsMinAggregateOutputType | null
    _max: TransactionsMaxAggregateOutputType | null
    max: TransactionsMaxAggregateOutputType | null
  }

  export type TransactionsAvgAggregateOutputType = {
    id: number | null
    user_id: number | null
    amount: number | null
    visible: number | null
  }

  export type TransactionsSumAggregateOutputType = {
    id: number | null
    user_id: number | null
    amount: number | null
    visible: number | null
  }

  export type TransactionsMinAggregateOutputType = {
    id: number | null
    trans_id: string | null
    user_id: number | null
    type: string | null
    amount: number | null
    status: string | null
    updateAt: Date | null
    createAt: Date | null
    visible: number | null
  }

  export type TransactionsMaxAggregateOutputType = {
    id: number | null
    trans_id: string | null
    user_id: number | null
    type: string | null
    amount: number | null
    status: string | null
    updateAt: Date | null
    createAt: Date | null
    visible: number | null
  }

  export type TransactionsCountAggregateOutputType = {
    id: number
    trans_id: number
    user_id: number
    type: number
    amount: number
    status: number
    updateAt: number
    createAt: number
    visible: number
    _all: number
  }


  export type TransactionsAvgAggregateInputType = {
    id?: true
    user_id?: true
    amount?: true
    visible?: true
  }

  export type TransactionsSumAggregateInputType = {
    id?: true
    user_id?: true
    amount?: true
    visible?: true
  }

  export type TransactionsMinAggregateInputType = {
    id?: true
    trans_id?: true
    user_id?: true
    type?: true
    amount?: true
    status?: true
    updateAt?: true
    createAt?: true
    visible?: true
  }

  export type TransactionsMaxAggregateInputType = {
    id?: true
    trans_id?: true
    user_id?: true
    type?: true
    amount?: true
    status?: true
    updateAt?: true
    createAt?: true
    visible?: true
  }

  export type TransactionsCountAggregateInputType = {
    id?: true
    trans_id?: true
    user_id?: true
    type?: true
    amount?: true
    status?: true
    updateAt?: true
    createAt?: true
    visible?: true
    _all?: true
  }

  export type TransactionsAggregateArgs = {
    /**
     * Filter which transactions to aggregate.
     * 
    **/
    where?: transactionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of transactions to fetch.
     * 
    **/
    orderBy?: Enumerable<transactionsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: transactionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` transactions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` transactions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned transactions
    **/
    _count?: true | TransactionsCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | TransactionsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TransactionsAvgAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_avg`
    **/
    avg?: TransactionsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TransactionsSumAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_sum`
    **/
    sum?: TransactionsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TransactionsMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: TransactionsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TransactionsMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: TransactionsMaxAggregateInputType
  }

  export type GetTransactionsAggregateType<T extends TransactionsAggregateArgs> = {
        [P in keyof T & keyof AggregateTransactions]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTransactions[P]>
      : GetScalarType<T[P], AggregateTransactions[P]>
  }


    
    
  export type TransactionsGroupByArgs = {
    where?: transactionsWhereInput
    orderBy?: Enumerable<transactionsOrderByInput>
    by: Array<TransactionsScalarFieldEnum>
    having?: transactionsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TransactionsCountAggregateInputType | true
    _avg?: TransactionsAvgAggregateInputType
    _sum?: TransactionsSumAggregateInputType
    _min?: TransactionsMinAggregateInputType
    _max?: TransactionsMaxAggregateInputType
  }


  export type TransactionsGroupByOutputType = {
    id: number
    trans_id: string
    user_id: number
    type: string
    amount: number
    status: string
    updateAt: Date
    createAt: Date
    visible: number
    _count: TransactionsCountAggregateOutputType | null
    _avg: TransactionsAvgAggregateOutputType | null
    _sum: TransactionsSumAggregateOutputType | null
    _min: TransactionsMinAggregateOutputType | null
    _max: TransactionsMaxAggregateOutputType | null
  }

  type GetTransactionsGroupByPayload<T extends TransactionsGroupByArgs> = Promise<
    Array<
      PickArray<TransactionsGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof TransactionsGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], TransactionsGroupByOutputType[P]> 
            : GetScalarType<T[P], TransactionsGroupByOutputType[P]>
        }
      > 
    >


  export type transactionsSelect = {
    id?: boolean
    trans_id?: boolean
    user_id?: boolean
    type?: boolean
    amount?: boolean
    status?: boolean
    updateAt?: boolean
    createAt?: boolean
    visible?: boolean
  }

  export type transactionsGetPayload<
    S extends boolean | null | undefined | transactionsArgs,
    U = keyof S
      > = S extends true
        ? transactions
    : S extends undefined
    ? never
    : S extends transactionsArgs | transactionsFindManyArgs
    ?'include' extends U
    ? transactions 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof transactions ?transactions [P]
  : 
     never
  } 
    : transactions
  : transactions


  type transactionsCountArgs = Merge<
    Omit<transactionsFindManyArgs, 'select' | 'include'> & {
      select?: TransactionsCountAggregateInputType | true
    }
  >

  export interface transactionsDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Transactions that matches the filter.
     * @param {transactionsFindUniqueArgs} args - Arguments to find a Transactions
     * @example
     * // Get one Transactions
     * const transactions = await prisma.transactions.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends transactionsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, transactionsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'transactions'> extends True ? CheckSelect<T, Prisma__transactionsClient<transactions>, Prisma__transactionsClient<transactionsGetPayload<T>>> : CheckSelect<T, Prisma__transactionsClient<transactions | null >, Prisma__transactionsClient<transactionsGetPayload<T> | null >>

    /**
     * Find the first Transactions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {transactionsFindFirstArgs} args - Arguments to find a Transactions
     * @example
     * // Get one Transactions
     * const transactions = await prisma.transactions.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends transactionsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, transactionsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'transactions'> extends True ? CheckSelect<T, Prisma__transactionsClient<transactions>, Prisma__transactionsClient<transactionsGetPayload<T>>> : CheckSelect<T, Prisma__transactionsClient<transactions | null >, Prisma__transactionsClient<transactionsGetPayload<T> | null >>

    /**
     * Find zero or more Transactions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {transactionsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Transactions
     * const transactions = await prisma.transactions.findMany()
     * 
     * // Get first 10 Transactions
     * const transactions = await prisma.transactions.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const transactionsWithIdOnly = await prisma.transactions.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends transactionsFindManyArgs>(
      args?: SelectSubset<T, transactionsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<transactions>>, PrismaPromise<Array<transactionsGetPayload<T>>>>

    /**
     * Create a Transactions.
     * @param {transactionsCreateArgs} args - Arguments to create a Transactions.
     * @example
     * // Create one Transactions
     * const Transactions = await prisma.transactions.create({
     *   data: {
     *     // ... data to create a Transactions
     *   }
     * })
     * 
    **/
    create<T extends transactionsCreateArgs>(
      args: SelectSubset<T, transactionsCreateArgs>
    ): CheckSelect<T, Prisma__transactionsClient<transactions>, Prisma__transactionsClient<transactionsGetPayload<T>>>

    /**
     * Create many Transactions.
     *     @param {transactionsCreateManyArgs} args - Arguments to create many Transactions.
     *     @example
     *     // Create many Transactions
     *     const transactions = await prisma.transactions.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends transactionsCreateManyArgs>(
      args?: SelectSubset<T, transactionsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Transactions.
     * @param {transactionsDeleteArgs} args - Arguments to delete one Transactions.
     * @example
     * // Delete one Transactions
     * const Transactions = await prisma.transactions.delete({
     *   where: {
     *     // ... filter to delete one Transactions
     *   }
     * })
     * 
    **/
    delete<T extends transactionsDeleteArgs>(
      args: SelectSubset<T, transactionsDeleteArgs>
    ): CheckSelect<T, Prisma__transactionsClient<transactions>, Prisma__transactionsClient<transactionsGetPayload<T>>>

    /**
     * Update one Transactions.
     * @param {transactionsUpdateArgs} args - Arguments to update one Transactions.
     * @example
     * // Update one Transactions
     * const transactions = await prisma.transactions.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends transactionsUpdateArgs>(
      args: SelectSubset<T, transactionsUpdateArgs>
    ): CheckSelect<T, Prisma__transactionsClient<transactions>, Prisma__transactionsClient<transactionsGetPayload<T>>>

    /**
     * Delete zero or more Transactions.
     * @param {transactionsDeleteManyArgs} args - Arguments to filter Transactions to delete.
     * @example
     * // Delete a few Transactions
     * const { count } = await prisma.transactions.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends transactionsDeleteManyArgs>(
      args?: SelectSubset<T, transactionsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {transactionsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Transactions
     * const transactions = await prisma.transactions.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends transactionsUpdateManyArgs>(
      args: SelectSubset<T, transactionsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Transactions.
     * @param {transactionsUpsertArgs} args - Arguments to update or create a Transactions.
     * @example
     * // Update or create a Transactions
     * const transactions = await prisma.transactions.upsert({
     *   create: {
     *     // ... data to create a Transactions
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Transactions we want to update
     *   }
     * })
    **/
    upsert<T extends transactionsUpsertArgs>(
      args: SelectSubset<T, transactionsUpsertArgs>
    ): CheckSelect<T, Prisma__transactionsClient<transactions>, Prisma__transactionsClient<transactionsGetPayload<T>>>

    /**
     * Count the number of Transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {transactionsCountArgs} args - Arguments to filter Transactions to count.
     * @example
     * // Count the number of Transactions
     * const count = await prisma.transactions.count({
     *   where: {
     *     // ... the filter for the Transactions we want to count
     *   }
     * })
    **/
    count<T extends transactionsCountArgs>(
      args?: Subset<T, transactionsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TransactionsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TransactionsAggregateArgs>(args: Subset<T, TransactionsAggregateArgs>): PrismaPromise<GetTransactionsAggregateType<T>>

    /**
     * Group by Transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TransactionsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TransactionsGroupByArgs['orderBy'] }
        : { orderBy?: TransactionsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TransactionsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTransactionsGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for transactions.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__transactionsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * transactions findUnique
   */
  export type transactionsFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the transactions
     * 
    **/
    select?: transactionsSelect | null
    /**
     * Throw an Error if a transactions can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which transactions to fetch.
     * 
    **/
    where: transactionsWhereUniqueInput
  }


  /**
   * transactions findFirst
   */
  export type transactionsFindFirstArgs = {
    /**
     * Select specific fields to fetch from the transactions
     * 
    **/
    select?: transactionsSelect | null
    /**
     * Throw an Error if a transactions can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which transactions to fetch.
     * 
    **/
    where?: transactionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of transactions to fetch.
     * 
    **/
    orderBy?: Enumerable<transactionsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for transactions.
     * 
    **/
    cursor?: transactionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` transactions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` transactions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of transactions.
     * 
    **/
    distinct?: Enumerable<TransactionsScalarFieldEnum>
  }


  /**
   * transactions findMany
   */
  export type transactionsFindManyArgs = {
    /**
     * Select specific fields to fetch from the transactions
     * 
    **/
    select?: transactionsSelect | null
    /**
     * Filter, which transactions to fetch.
     * 
    **/
    where?: transactionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of transactions to fetch.
     * 
    **/
    orderBy?: Enumerable<transactionsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing transactions.
     * 
    **/
    cursor?: transactionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` transactions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` transactions.
     * 
    **/
    skip?: number
    distinct?: Enumerable<TransactionsScalarFieldEnum>
  }


  /**
   * transactions create
   */
  export type transactionsCreateArgs = {
    /**
     * Select specific fields to fetch from the transactions
     * 
    **/
    select?: transactionsSelect | null
    /**
     * The data needed to create a transactions.
     * 
    **/
    data: XOR<transactionsCreateInput, transactionsUncheckedCreateInput>
  }


  /**
   * transactions createMany
   */
  export type transactionsCreateManyArgs = {
    data: Enumerable<transactionsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * transactions update
   */
  export type transactionsUpdateArgs = {
    /**
     * Select specific fields to fetch from the transactions
     * 
    **/
    select?: transactionsSelect | null
    /**
     * The data needed to update a transactions.
     * 
    **/
    data: XOR<transactionsUpdateInput, transactionsUncheckedUpdateInput>
    /**
     * Choose, which transactions to update.
     * 
    **/
    where: transactionsWhereUniqueInput
  }


  /**
   * transactions updateMany
   */
  export type transactionsUpdateManyArgs = {
    data: XOR<transactionsUpdateManyMutationInput, transactionsUncheckedUpdateManyInput>
    where?: transactionsWhereInput
  }


  /**
   * transactions upsert
   */
  export type transactionsUpsertArgs = {
    /**
     * Select specific fields to fetch from the transactions
     * 
    **/
    select?: transactionsSelect | null
    /**
     * The filter to search for the transactions to update in case it exists.
     * 
    **/
    where: transactionsWhereUniqueInput
    /**
     * In case the transactions found by the `where` argument doesn't exist, create a new transactions with this data.
     * 
    **/
    create: XOR<transactionsCreateInput, transactionsUncheckedCreateInput>
    /**
     * In case the transactions was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<transactionsUpdateInput, transactionsUncheckedUpdateInput>
  }


  /**
   * transactions delete
   */
  export type transactionsDeleteArgs = {
    /**
     * Select specific fields to fetch from the transactions
     * 
    **/
    select?: transactionsSelect | null
    /**
     * Filter which transactions to delete.
     * 
    **/
    where: transactionsWhereUniqueInput
  }


  /**
   * transactions deleteMany
   */
  export type transactionsDeleteManyArgs = {
    where?: transactionsWhereInput
  }


  /**
   * transactions without action
   */
  export type transactionsArgs = {
    /**
     * Select specific fields to fetch from the transactions
     * 
    **/
    select?: transactionsSelect | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const AccountsScalarFieldEnum: {
    id: 'id',
    createAt: 'createAt',
    naira_bal: 'naira_bal',
    usd_bal: 'usd_bal',
    user_id: 'user_id',
    account_number: 'account_number',
    bank: 'bank',
    acctRef: 'acctRef',
    visibile: 'visibile',
    updateAt: 'updateAt'
  };

  export type AccountsScalarFieldEnum = (typeof AccountsScalarFieldEnum)[keyof typeof AccountsScalarFieldEnum]


  export const TransfersScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    amount: 'amount',
    to_account: 'to_account',
    to_bank: 'to_bank',
    to_name: 'to_name',
    bal_after: 'bal_after',
    createAt: 'createAt',
    updateAt: 'updateAt'
  };

  export type TransfersScalarFieldEnum = (typeof TransfersScalarFieldEnum)[keyof typeof TransfersScalarFieldEnum]


  export const Acces_tokensScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    token: 'token',
    status: 'status',
    createAt: 'createAt',
    updateAt: 'updateAt',
    visible: 'visible'
  };

  export type Acces_tokensScalarFieldEnum = (typeof Acces_tokensScalarFieldEnum)[keyof typeof Acces_tokensScalarFieldEnum]


  export const BillsScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    bill_id: 'bill_id',
    bill_type: 'bill_type',
    amount: 'amount',
    description: 'description',
    createAt: 'createAt',
    updateAt: 'updateAt',
    status: 'status',
    access_details: 'access_details',
    visible: 'visible'
  };

  export type BillsScalarFieldEnum = (typeof BillsScalarFieldEnum)[keyof typeof BillsScalarFieldEnum]


  export const UsersScalarFieldEnum: {
    id: 'id',
    email: 'email',
    name: 'name',
    password: 'password',
    ccode: 'ccode',
    fingerprint: 'fingerprint',
    phone_number: 'phone_number',
    pin: 'pin',
    createAt: 'createAt',
    updateAt: 'updateAt',
    visibility: 'visibility',
    wallet_balance: 'wallet_balance'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const TransactionsScalarFieldEnum: {
    id: 'id',
    trans_id: 'trans_id',
    user_id: 'user_id',
    type: 'type',
    amount: 'amount',
    status: 'status',
    updateAt: 'updateAt',
    createAt: 'createAt',
    visible: 'visible'
  };

  export type TransactionsScalarFieldEnum = (typeof TransactionsScalarFieldEnum)[keyof typeof TransactionsScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Deep Input Types
   */


  export type accountsWhereInput = {
    AND?: Enumerable<accountsWhereInput>
    OR?: Enumerable<accountsWhereInput>
    NOT?: Enumerable<accountsWhereInput>
    id?: IntFilter | number
    createAt?: DateTimeFilter | Date | string
    naira_bal?: FloatFilter | number
    usd_bal?: FloatFilter | number
    user_id?: IntFilter | number
    account_number?: StringNullableFilter | string | null
    bank?: StringNullableFilter | string | null
    acctRef?: StringNullableFilter | string | null
    visibile?: IntFilter | number
    updateAt?: DateTimeFilter | Date | string
  }

  export type accountsOrderByInput = {
    id?: SortOrder
    createAt?: SortOrder
    naira_bal?: SortOrder
    usd_bal?: SortOrder
    user_id?: SortOrder
    account_number?: SortOrder
    bank?: SortOrder
    acctRef?: SortOrder
    visibile?: SortOrder
    updateAt?: SortOrder
  }

  export type accountsWhereUniqueInput = {
    id?: number
    user_id?: number
  }

  export type accountsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<accountsScalarWhereWithAggregatesInput>
    OR?: Enumerable<accountsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<accountsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    createAt?: DateTimeWithAggregatesFilter | Date | string
    naira_bal?: FloatWithAggregatesFilter | number
    usd_bal?: FloatWithAggregatesFilter | number
    user_id?: IntWithAggregatesFilter | number
    account_number?: StringNullableWithAggregatesFilter | string | null
    bank?: StringNullableWithAggregatesFilter | string | null
    acctRef?: StringNullableWithAggregatesFilter | string | null
    visibile?: IntWithAggregatesFilter | number
    updateAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type transfersWhereInput = {
    AND?: Enumerable<transfersWhereInput>
    OR?: Enumerable<transfersWhereInput>
    NOT?: Enumerable<transfersWhereInput>
    id?: IntFilter | number
    user_id?: IntFilter | number
    amount?: FloatFilter | number
    to_account?: StringFilter | string
    to_bank?: StringFilter | string
    to_name?: StringFilter | string
    bal_after?: FloatFilter | number
    createAt?: DateTimeFilter | Date | string
    updateAt?: DateTimeFilter | Date | string
  }

  export type transfersOrderByInput = {
    id?: SortOrder
    user_id?: SortOrder
    amount?: SortOrder
    to_account?: SortOrder
    to_bank?: SortOrder
    to_name?: SortOrder
    bal_after?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
  }

  export type transfersWhereUniqueInput = {
    id?: number
  }

  export type transfersScalarWhereWithAggregatesInput = {
    AND?: Enumerable<transfersScalarWhereWithAggregatesInput>
    OR?: Enumerable<transfersScalarWhereWithAggregatesInput>
    NOT?: Enumerable<transfersScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    user_id?: IntWithAggregatesFilter | number
    amount?: FloatWithAggregatesFilter | number
    to_account?: StringWithAggregatesFilter | string
    to_bank?: StringWithAggregatesFilter | string
    to_name?: StringWithAggregatesFilter | string
    bal_after?: FloatWithAggregatesFilter | number
    createAt?: DateTimeWithAggregatesFilter | Date | string
    updateAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type acces_tokensWhereInput = {
    AND?: Enumerable<acces_tokensWhereInput>
    OR?: Enumerable<acces_tokensWhereInput>
    NOT?: Enumerable<acces_tokensWhereInput>
    id?: IntFilter | number
    user_id?: IntFilter | number
    token?: StringFilter | string
    status?: StringFilter | string
    createAt?: DateTimeFilter | Date | string
    updateAt?: DateTimeFilter | Date | string
    visible?: IntFilter | number
  }

  export type acces_tokensOrderByInput = {
    id?: SortOrder
    user_id?: SortOrder
    token?: SortOrder
    status?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
    visible?: SortOrder
  }

  export type acces_tokensWhereUniqueInput = {
    id?: number
    token?: string
  }

  export type acces_tokensScalarWhereWithAggregatesInput = {
    AND?: Enumerable<acces_tokensScalarWhereWithAggregatesInput>
    OR?: Enumerable<acces_tokensScalarWhereWithAggregatesInput>
    NOT?: Enumerable<acces_tokensScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    user_id?: IntWithAggregatesFilter | number
    token?: StringWithAggregatesFilter | string
    status?: StringWithAggregatesFilter | string
    createAt?: DateTimeWithAggregatesFilter | Date | string
    updateAt?: DateTimeWithAggregatesFilter | Date | string
    visible?: IntWithAggregatesFilter | number
  }

  export type billsWhereInput = {
    AND?: Enumerable<billsWhereInput>
    OR?: Enumerable<billsWhereInput>
    NOT?: Enumerable<billsWhereInput>
    id?: IntFilter | number
    user_id?: IntFilter | number
    bill_id?: IntFilter | number
    bill_type?: StringFilter | string
    amount?: FloatFilter | number
    description?: StringFilter | string
    createAt?: DateTimeFilter | Date | string
    updateAt?: DateTimeFilter | Date | string
    status?: StringFilter | string
    access_details?: StringFilter | string
    visible?: IntFilter | number
  }

  export type billsOrderByInput = {
    id?: SortOrder
    user_id?: SortOrder
    bill_id?: SortOrder
    bill_type?: SortOrder
    amount?: SortOrder
    description?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
    status?: SortOrder
    access_details?: SortOrder
    visible?: SortOrder
  }

  export type billsWhereUniqueInput = {
    id?: number
  }

  export type billsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<billsScalarWhereWithAggregatesInput>
    OR?: Enumerable<billsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<billsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    user_id?: IntWithAggregatesFilter | number
    bill_id?: IntWithAggregatesFilter | number
    bill_type?: StringWithAggregatesFilter | string
    amount?: FloatWithAggregatesFilter | number
    description?: StringWithAggregatesFilter | string
    createAt?: DateTimeWithAggregatesFilter | Date | string
    updateAt?: DateTimeWithAggregatesFilter | Date | string
    status?: StringWithAggregatesFilter | string
    access_details?: StringWithAggregatesFilter | string
    visible?: IntWithAggregatesFilter | number
  }

  export type usersWhereInput = {
    AND?: Enumerable<usersWhereInput>
    OR?: Enumerable<usersWhereInput>
    NOT?: Enumerable<usersWhereInput>
    id?: IntFilter | number
    email?: StringFilter | string
    name?: StringNullableFilter | string | null
    password?: StringFilter | string
    ccode?: StringFilter | string
    fingerprint?: StringNullableFilter | string | null
    phone_number?: StringFilter | string
    pin?: IntFilter | number
    createAt?: DateTimeFilter | Date | string
    updateAt?: DateTimeFilter | Date | string
    visibility?: IntFilter | number
    wallet_balance?: FloatFilter | number
  }

  export type usersOrderByInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    ccode?: SortOrder
    fingerprint?: SortOrder
    phone_number?: SortOrder
    pin?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
    visibility?: SortOrder
    wallet_balance?: SortOrder
  }

  export type usersWhereUniqueInput = {
    id?: number
    email?: string
    phone_number?: string
  }

  export type usersScalarWhereWithAggregatesInput = {
    AND?: Enumerable<usersScalarWhereWithAggregatesInput>
    OR?: Enumerable<usersScalarWhereWithAggregatesInput>
    NOT?: Enumerable<usersScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    email?: StringWithAggregatesFilter | string
    name?: StringNullableWithAggregatesFilter | string | null
    password?: StringWithAggregatesFilter | string
    ccode?: StringWithAggregatesFilter | string
    fingerprint?: StringNullableWithAggregatesFilter | string | null
    phone_number?: StringWithAggregatesFilter | string
    pin?: IntWithAggregatesFilter | number
    createAt?: DateTimeWithAggregatesFilter | Date | string
    updateAt?: DateTimeWithAggregatesFilter | Date | string
    visibility?: IntWithAggregatesFilter | number
    wallet_balance?: FloatWithAggregatesFilter | number
  }

  export type transactionsWhereInput = {
    AND?: Enumerable<transactionsWhereInput>
    OR?: Enumerable<transactionsWhereInput>
    NOT?: Enumerable<transactionsWhereInput>
    id?: IntFilter | number
    trans_id?: StringFilter | string
    user_id?: IntFilter | number
    type?: StringFilter | string
    amount?: FloatFilter | number
    status?: StringFilter | string
    updateAt?: DateTimeFilter | Date | string
    createAt?: DateTimeFilter | Date | string
    visible?: IntFilter | number
  }

  export type transactionsOrderByInput = {
    id?: SortOrder
    trans_id?: SortOrder
    user_id?: SortOrder
    type?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    updateAt?: SortOrder
    createAt?: SortOrder
    visible?: SortOrder
  }

  export type transactionsWhereUniqueInput = {
    id?: number
  }

  export type transactionsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<transactionsScalarWhereWithAggregatesInput>
    OR?: Enumerable<transactionsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<transactionsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    trans_id?: StringWithAggregatesFilter | string
    user_id?: IntWithAggregatesFilter | number
    type?: StringWithAggregatesFilter | string
    amount?: FloatWithAggregatesFilter | number
    status?: StringWithAggregatesFilter | string
    updateAt?: DateTimeWithAggregatesFilter | Date | string
    createAt?: DateTimeWithAggregatesFilter | Date | string
    visible?: IntWithAggregatesFilter | number
  }

  export type accountsCreateInput = {
    createAt?: Date | string
    naira_bal?: number
    usd_bal?: number
    user_id: number
    account_number?: string | null
    bank?: string | null
    acctRef?: string | null
    visibile?: number
    updateAt?: Date | string
  }

  export type accountsUncheckedCreateInput = {
    id?: number
    createAt?: Date | string
    naira_bal?: number
    usd_bal?: number
    user_id: number
    account_number?: string | null
    bank?: string | null
    acctRef?: string | null
    visibile?: number
    updateAt?: Date | string
  }

  export type accountsUpdateInput = {
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    naira_bal?: FloatFieldUpdateOperationsInput | number
    usd_bal?: FloatFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    account_number?: NullableStringFieldUpdateOperationsInput | string | null
    bank?: NullableStringFieldUpdateOperationsInput | string | null
    acctRef?: NullableStringFieldUpdateOperationsInput | string | null
    visibile?: IntFieldUpdateOperationsInput | number
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type accountsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    naira_bal?: FloatFieldUpdateOperationsInput | number
    usd_bal?: FloatFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    account_number?: NullableStringFieldUpdateOperationsInput | string | null
    bank?: NullableStringFieldUpdateOperationsInput | string | null
    acctRef?: NullableStringFieldUpdateOperationsInput | string | null
    visibile?: IntFieldUpdateOperationsInput | number
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type accountsCreateManyInput = {
    id?: number
    createAt?: Date | string
    naira_bal?: number
    usd_bal?: number
    user_id: number
    account_number?: string | null
    bank?: string | null
    acctRef?: string | null
    visibile?: number
    updateAt?: Date | string
  }

  export type accountsUpdateManyMutationInput = {
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    naira_bal?: FloatFieldUpdateOperationsInput | number
    usd_bal?: FloatFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    account_number?: NullableStringFieldUpdateOperationsInput | string | null
    bank?: NullableStringFieldUpdateOperationsInput | string | null
    acctRef?: NullableStringFieldUpdateOperationsInput | string | null
    visibile?: IntFieldUpdateOperationsInput | number
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type accountsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    naira_bal?: FloatFieldUpdateOperationsInput | number
    usd_bal?: FloatFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    account_number?: NullableStringFieldUpdateOperationsInput | string | null
    bank?: NullableStringFieldUpdateOperationsInput | string | null
    acctRef?: NullableStringFieldUpdateOperationsInput | string | null
    visibile?: IntFieldUpdateOperationsInput | number
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type transfersCreateInput = {
    user_id: number
    amount: number
    to_account: string
    to_bank: string
    to_name: string
    bal_after: number
    createAt: Date | string
    updateAt: Date | string
  }

  export type transfersUncheckedCreateInput = {
    id?: number
    user_id: number
    amount: number
    to_account: string
    to_bank: string
    to_name: string
    bal_after: number
    createAt: Date | string
    updateAt: Date | string
  }

  export type transfersUpdateInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    to_account?: StringFieldUpdateOperationsInput | string
    to_bank?: StringFieldUpdateOperationsInput | string
    to_name?: StringFieldUpdateOperationsInput | string
    bal_after?: FloatFieldUpdateOperationsInput | number
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type transfersUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    to_account?: StringFieldUpdateOperationsInput | string
    to_bank?: StringFieldUpdateOperationsInput | string
    to_name?: StringFieldUpdateOperationsInput | string
    bal_after?: FloatFieldUpdateOperationsInput | number
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type transfersCreateManyInput = {
    id?: number
    user_id: number
    amount: number
    to_account: string
    to_bank: string
    to_name: string
    bal_after: number
    createAt: Date | string
    updateAt: Date | string
  }

  export type transfersUpdateManyMutationInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    to_account?: StringFieldUpdateOperationsInput | string
    to_bank?: StringFieldUpdateOperationsInput | string
    to_name?: StringFieldUpdateOperationsInput | string
    bal_after?: FloatFieldUpdateOperationsInput | number
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type transfersUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    to_account?: StringFieldUpdateOperationsInput | string
    to_bank?: StringFieldUpdateOperationsInput | string
    to_name?: StringFieldUpdateOperationsInput | string
    bal_after?: FloatFieldUpdateOperationsInput | number
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type acces_tokensCreateInput = {
    user_id: number
    token: string
    status: string
    createAt: Date | string
    updateAt: Date | string
    visible?: number
  }

  export type acces_tokensUncheckedCreateInput = {
    id?: number
    user_id: number
    token: string
    status: string
    createAt: Date | string
    updateAt: Date | string
    visible?: number
  }

  export type acces_tokensUpdateInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    token?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    visible?: IntFieldUpdateOperationsInput | number
  }

  export type acces_tokensUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    token?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    visible?: IntFieldUpdateOperationsInput | number
  }

  export type acces_tokensCreateManyInput = {
    id?: number
    user_id: number
    token: string
    status: string
    createAt: Date | string
    updateAt: Date | string
    visible?: number
  }

  export type acces_tokensUpdateManyMutationInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    token?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    visible?: IntFieldUpdateOperationsInput | number
  }

  export type acces_tokensUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    token?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    visible?: IntFieldUpdateOperationsInput | number
  }

  export type billsCreateInput = {
    user_id: number
    bill_id: number
    bill_type: string
    amount: number
    description: string
    createAt: Date | string
    updateAt: Date | string
    status: string
    access_details: string
    visible?: number
  }

  export type billsUncheckedCreateInput = {
    id?: number
    user_id: number
    bill_id: number
    bill_type: string
    amount: number
    description: string
    createAt: Date | string
    updateAt: Date | string
    status: string
    access_details: string
    visible?: number
  }

  export type billsUpdateInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    bill_id?: IntFieldUpdateOperationsInput | number
    bill_type?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    access_details?: StringFieldUpdateOperationsInput | string
    visible?: IntFieldUpdateOperationsInput | number
  }

  export type billsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    bill_id?: IntFieldUpdateOperationsInput | number
    bill_type?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    access_details?: StringFieldUpdateOperationsInput | string
    visible?: IntFieldUpdateOperationsInput | number
  }

  export type billsCreateManyInput = {
    id?: number
    user_id: number
    bill_id: number
    bill_type: string
    amount: number
    description: string
    createAt: Date | string
    updateAt: Date | string
    status: string
    access_details: string
    visible?: number
  }

  export type billsUpdateManyMutationInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    bill_id?: IntFieldUpdateOperationsInput | number
    bill_type?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    access_details?: StringFieldUpdateOperationsInput | string
    visible?: IntFieldUpdateOperationsInput | number
  }

  export type billsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    bill_id?: IntFieldUpdateOperationsInput | number
    bill_type?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    access_details?: StringFieldUpdateOperationsInput | string
    visible?: IntFieldUpdateOperationsInput | number
  }

  export type usersCreateInput = {
    email: string
    name?: string | null
    password: string
    ccode: string
    fingerprint?: string | null
    phone_number: string
    pin: number
    createAt?: Date | string
    updateAt?: Date | string
    visibility?: number
    wallet_balance?: number
  }

  export type usersUncheckedCreateInput = {
    id?: number
    email: string
    name?: string | null
    password: string
    ccode: string
    fingerprint?: string | null
    phone_number: string
    pin: number
    createAt?: Date | string
    updateAt?: Date | string
    visibility?: number
    wallet_balance?: number
  }

  export type usersUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    ccode?: StringFieldUpdateOperationsInput | string
    fingerprint?: NullableStringFieldUpdateOperationsInput | string | null
    phone_number?: StringFieldUpdateOperationsInput | string
    pin?: IntFieldUpdateOperationsInput | number
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    visibility?: IntFieldUpdateOperationsInput | number
    wallet_balance?: FloatFieldUpdateOperationsInput | number
  }

  export type usersUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    ccode?: StringFieldUpdateOperationsInput | string
    fingerprint?: NullableStringFieldUpdateOperationsInput | string | null
    phone_number?: StringFieldUpdateOperationsInput | string
    pin?: IntFieldUpdateOperationsInput | number
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    visibility?: IntFieldUpdateOperationsInput | number
    wallet_balance?: FloatFieldUpdateOperationsInput | number
  }

  export type usersCreateManyInput = {
    id?: number
    email: string
    name?: string | null
    password: string
    ccode: string
    fingerprint?: string | null
    phone_number: string
    pin: number
    createAt?: Date | string
    updateAt?: Date | string
    visibility?: number
    wallet_balance?: number
  }

  export type usersUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    ccode?: StringFieldUpdateOperationsInput | string
    fingerprint?: NullableStringFieldUpdateOperationsInput | string | null
    phone_number?: StringFieldUpdateOperationsInput | string
    pin?: IntFieldUpdateOperationsInput | number
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    visibility?: IntFieldUpdateOperationsInput | number
    wallet_balance?: FloatFieldUpdateOperationsInput | number
  }

  export type usersUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    ccode?: StringFieldUpdateOperationsInput | string
    fingerprint?: NullableStringFieldUpdateOperationsInput | string | null
    phone_number?: StringFieldUpdateOperationsInput | string
    pin?: IntFieldUpdateOperationsInput | number
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    visibility?: IntFieldUpdateOperationsInput | number
    wallet_balance?: FloatFieldUpdateOperationsInput | number
  }

  export type transactionsCreateInput = {
    trans_id: string
    user_id: number
    type: string
    amount: number
    status: string
    updateAt: Date | string
    createAt?: Date | string
    visible?: number
  }

  export type transactionsUncheckedCreateInput = {
    id?: number
    trans_id: string
    user_id: number
    type: string
    amount: number
    status: string
    updateAt: Date | string
    createAt?: Date | string
    visible?: number
  }

  export type transactionsUpdateInput = {
    trans_id?: StringFieldUpdateOperationsInput | string
    user_id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    visible?: IntFieldUpdateOperationsInput | number
  }

  export type transactionsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    trans_id?: StringFieldUpdateOperationsInput | string
    user_id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    visible?: IntFieldUpdateOperationsInput | number
  }

  export type transactionsCreateManyInput = {
    id?: number
    trans_id: string
    user_id: number
    type: string
    amount: number
    status: string
    updateAt: Date | string
    createAt?: Date | string
    visible?: number
  }

  export type transactionsUpdateManyMutationInput = {
    trans_id?: StringFieldUpdateOperationsInput | string
    user_id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    visible?: IntFieldUpdateOperationsInput | number
  }

  export type transactionsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    trans_id?: StringFieldUpdateOperationsInput | string
    user_id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    visible?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type FloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _avg?: NestedFloatFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    sum?: NestedIntFilter
    _min?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedIntFilter
    _max?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedIntFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedDateTimeFilter
  }

  export type FloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _avg?: NestedFloatFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedFloatFilter
    _max?: NestedFloatFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedFloatFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedStringNullableFilter
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _min?: NestedStringFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedStringFilter
    _max?: NestedStringFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedStringFilter
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _avg?: NestedFloatFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    sum?: NestedIntFilter
    _min?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedIntFilter
    _max?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedIntFilter
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedDateTimeFilter
  }

  export type NestedFloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _avg?: NestedFloatFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedFloatFilter
    _max?: NestedFloatFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedFloatFilter
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _min?: NestedStringFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedStringFilter
    _max?: NestedStringFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedStringFilter
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}