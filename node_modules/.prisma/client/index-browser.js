
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 2.30.3
 * Query Engine version: b8c35d44de987a9691890b3ddf3e2e7effb9bf20
 */
Prisma.prismaVersion = {
  client: "2.30.3",
  engine: "b8c35d44de987a9691890b3ddf3e2e7effb9bf20"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */

Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.AccountsScalarFieldEnum = makeEnum({
  id: 'id',
  createAt: 'createAt',
  naira_bal: 'naira_bal',
  usd_bal: 'usd_bal',
  user_id: 'user_id',
  account_number: 'account_number',
  bank: 'bank',
  acctRef: 'acctRef',
  visibile: 'visibile',
  updateAt: 'updateAt'
});

exports.Prisma.TransfersScalarFieldEnum = makeEnum({
  id: 'id',
  user_id: 'user_id',
  amount: 'amount',
  to_account: 'to_account',
  to_bank: 'to_bank',
  to_name: 'to_name',
  bal_after: 'bal_after',
  createAt: 'createAt',
  updateAt: 'updateAt'
});

exports.Prisma.Acces_tokensScalarFieldEnum = makeEnum({
  id: 'id',
  user_id: 'user_id',
  token: 'token',
  status: 'status',
  createAt: 'createAt',
  updateAt: 'updateAt',
  visible: 'visible'
});

exports.Prisma.BillsScalarFieldEnum = makeEnum({
  id: 'id',
  user_id: 'user_id',
  bill_id: 'bill_id',
  bill_type: 'bill_type',
  amount: 'amount',
  description: 'description',
  createAt: 'createAt',
  updateAt: 'updateAt',
  status: 'status',
  access_details: 'access_details',
  visible: 'visible'
});

exports.Prisma.UsersScalarFieldEnum = makeEnum({
  id: 'id',
  email: 'email',
  name: 'name',
  password: 'password',
  ccode: 'ccode',
  fingerprint: 'fingerprint',
  phone_number: 'phone_number',
  pin: 'pin',
  createAt: 'createAt',
  updateAt: 'updateAt',
  visibility: 'visibility',
  wallet_balance: 'wallet_balance'
});

exports.Prisma.TransactionsScalarFieldEnum = makeEnum({
  id: 'id',
  trans_id: 'trans_id',
  user_id: 'user_id',
  type: 'type',
  amount: 'amount',
  status: 'status',
  updateAt: 'updateAt',
  createAt: 'createAt',
  visible: 'visible'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});


exports.Prisma.ModelName = makeEnum({
  accounts: 'accounts',
  transfers: 'transfers',
  acces_tokens: 'acces_tokens',
  bills: 'bills',
  users: 'users',
  transactions: 'transactions'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
